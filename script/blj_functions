###################################################################
##                                                               ##
##  This script contains common functions used in BioLockJ.      ##
##                                                               ##
###################################################################

alias awsr="aws_report_config"

# Add a named arg to a space-delimited list of args (Use "=" to add a name-value pair)
# Param 1 - arg name
# Param 2 - arg value
# Param 3 (optional) - space delimited named args: if empty, return name-value pair
add_named_arg() {
	myArgs=$3
	val=$(named_arg "$3" $1)
	[ $# -eq 2 ] && echo "$1=$2"
	[ $# -eq 3 ] && [ ${#val} -gt 0 ] && myArgs="${3/$1=$val}"
	[ $# -eq 3 ] && echo "$myArgs $1=$2"
}

# Print AWS Config report
aws_report_config() {
	echo "---------------------------------------------------"
	echo "Report current AWS Config"
	echo "---------------------------------------------------"
	[ -f ~/.aws/blj_config ] && tail -n +2 ~/.aws/blj_config
	echo "---------------------------------------------------"
}

# This script navigates the $USER to their most recent pipeline and lists the current directory
blj_go() {
	[ ! -d "$BLJ_PROJ" ] && echo "Exit program - BLJ_PROJ: directory not found: $BLJ_PROJ" && return
	pipeline=$(most_recent_pipeline)
	if [ ${#pipeline} -gt 0 ]; then
		echo "Goto latest BioLockJ pipeline: $pipeline"
		cd "$pipeline"
		ls "$pipeline"
	else
		echo "No pipelines found in BLJ_PROJ: $BLJ_PROJ"
	fi
}

# This script tails 1K lines from the current pipelines Java log file.
# If the current directory is not a BioLockJ pipeline, print last 1K lines from the most recent pipeline executed.  
# If param is passed, pass it to tail command in place of -1000 parameter.
blj_log() {
	pipeline=$(current_pipeline)
	if [ ${#pipeline} -gt 0 ]; then
		echo "Tail current BioLockJ pipeline log: $pipeline"
	else
		pipeline=$(most_recent_pipeline)
		[ ${#pipeline} -gt 0 ] && echo "Tail most recent BioLockJ pipeline log: $pipeline"
	fi
	
	if [ ${#pipeline} -gt 0 ]; then
		if [ ${#1} -gt 0 ]; then
			\tail $1 $pipeline/*.log 
		else
			\tail -1000 $pipeline/*.log 
		fi
	else
		echo "No pipelines found in BLJ_PROJ: $BLJ_PROJ"
	fi
}

# Rerun current pipeline from point of failure using same MASTER config
blj_rerun() {
	biolockj -r $PWD
}

# This script prints the Summary BioModule output of current pipeline.
# If the current directory is not a BioLockJ pipeline, print the summary of the most recent pipeline executed.
blj_summary() {
	pipeline=$(most_recent_pipeline)
	SUM=summary.txt
	if [ -f $SUM ]; then
		echo "Print summary file: $SUM"
		cat $SUM
	elif [ ${#pipeline} -gt 0 ]; then
		echo "Print summary file: $pipeline/$SUM"
		cat "$pipeline/$SUM"
	else
		echo "No pipeline summary found in BLJ_PROJ: $BLJ_PROJ"
	fi
}

# Return absolute path of current pipeline if in a pipeline directory
current_pipeline() {
	if ! $(dir_missing $BLJ_PROJ); then
		dir="$PWD"
		parentDir="$(dirname $dir)"
		while [ "$parentDir" != "$BLJ_PROJ" ] && [ "$parentDir" != "$(dirname $parentDir)" ] && ! $(is_pipeline_dir $dir)
		do
			dir="$parentDir"
			parentDir="$(dirname $parentDir)"
		done
		[ "$parentDir" == "$BLJ_PROJ" ] && echo $dir
   fi
}

# Exit script after sleeping 10 seconds because in some cases (Docker bash shells) exit command will close the terminal window.
# In this case, the user can at least view the message before the window closes.
# Param 1 Exit message
# Param 2 (optional) Numeric status code
exit_script() {
	status=$2
	[ ${#status} -eq 0 ] && status=1
	echo "$1" && sleep 5 && exit $2
}

# Return BioLockJ release version
get_version() {
	if [ -f "$BLJ/.version" ]; then
		{ read -r v; } < "$BLJ/.version"
		echo $v
	else
		echo "Missing $BLJ/.version"
	fi
}

# Return 0 if directory is empty (or missing)
# Param 1 - Directory-path expected
dir_missing() {
	[ ! -d "$1" ] || [ -z "$(\ls -A $1)" ]
}

# Return TRUE if the directory path given ends with a valid module name
# Example: 01_Demultiplexer
is_module_dir() {
	modName=$(basename $1)
	modNum=0
	[ ${#modName} -gt 3 ] && modNum=$( echo ${modName:0:2} | egrep "^[0-9{2}]+$" )
	
	[ -d "$1" ] && [ ${modName:2:1} == "_" ] && [ $modNum -gt 0 ]
}

# Trim last input $1 character if ends with "/"
# Return 0 status code if $1 param ends with patthern _yyyymmmdd.
# Example: myTestPipeline_2019Jan01 returns TRUE
is_pipeline_dir() {
	dir=$1
	[ "${dir: -1}" == "/" ] && dir=${dir:0:$((${#dir}-1))}
	prefix=${dir: -10:1}
	year=$(echo ${dir: -9:4} | egrep "^[0-9{4}]+$")
	mon1=$(echo ${dir: -5:1} | egrep "^[A-S]+$")
	mon23=$(echo ${dir: -4:2} | egrep "^[a-y{2}]+$")
	day=$(echo ${dir: -2} | egrep "^[0-9{2}]+$")
	[ "$dir" == "${dir/.}" ] && [ -d "$1" ] && [ "$prefix" == "_" ] && [ ${#year} -eq 4 ] && [ ${#mon1} -eq 1 ] && [ ${#mon23} -eq 2 ] && [ ${#day} -eq 2 ]
}

# Return absolute path of most recent pipeline
most_recent_pipeline() {
	if ! $(dir_missing $BLJ_PROJ); then
		for dir in $(ls -1dt $BLJ_PROJ/*); do
			$(is_pipeline_dir $dir) && echo "$dir" && return
		done
	fi
}

# Pass script input parameters + the argument name
# Named arguments must be formated: "argName=argValue"
# Param 1 aws_functions script args $@
# Param 2 parameter name
named_arg() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args; do
		IFS="=" && tokens=( $arg )
		[ ${#tokens[*]} -eq 2 ] && [ ${tokens[0]} == $target ] && echo ${tokens[1]} && return
	done
}

# Split data into an array using the delim to separate elements
# Param 1 - data
# Param 2 - delim
split_data() {
 	data=(${1//"${2}"/ })
	for val in "${data[@]}"; do
		echo "${val}"
	done
}

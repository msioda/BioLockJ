#!/bin/bash
##############################################################
##                                                          ##
##  This script is used for AWS Config functions            ##
##                                                          ##
##############################################################
. $BLJ/script/blj_functions

aws_home_dir=~/.aws
aws_local_config=$aws_home_dir/config
aws_cred_file=$aws_home_dir/credentials
blj_aws_config=$aws_home_dir/blj_config
sheBang="#!/bin/bash"

# Retrieve Linux AMI with name like amzn2-ami-ecs-hvm-2.0.20190301-x86_64-ebs AMI
aws_get_ami() {
	ami=$(aws ec2 describe-images --region $(get_blj_prop awsRegion) --owner amazon \
		--filter "Name=name,Values=amzn2-ami-ecs-hvm-*$(date +%Y)*x86_64-ebs" \
		--query "reverse(sort_by(Images, &CreationDate))[:1].ImageId" )
	[ ${#ami} -eq 0 ] && echo "Error:  Unable to obtain AWS AMI template from region $(get_blj_prop awsRegion)" && exit 1
	echo $ami
}

# Get an AWS property $1 from local AWS Config file $2 under the awsProfile
# Param 1 argName Parse filePath for a line that starts with argName
# Param 2 filePath Target file
aws_local_prop() {
	[ ! -f "$2" ] && echo "Error:  File not found: $2" && return
	foundProfile=0
	prop="$1 = "
	userProfile="[$(get_blj_prop awsProfile)]"
	cat $2 | while read -r line; do
		[ $foundProfile -eq 1 ] && [ "${line:0:1}" == "[" ] && break
		[ $foundProfile -eq 1 ] && [ "${line:0:${#prop}}" == "$prop" ] && echo "${line/$prop}" && return
		[ "$line" == "$userProfile" ] && foundProfile=1
	done
}

# Print AWS Config report
aws_report_config() {
	echo "AWS Config Report"
	conf=$(cat $blj_aws_config)
	[ ${#conf} -eq 0 ] && return
	props=("$conf")
	for arg in ${props[@]}; do
		IFS2=$IFS && IFS="=" && tokens=( ${arg} )
		IFS=$IFS2 && echo "----> ${tokens[0]}=${tokens[1]}"
	done
}

# Get a role get_role for the configured stack 
# Param 1 Role name
aws_role() {
	role=$(aws cloudformation describe-stacks --stack-name $(get_blj_prop awsStack) --query "Stacks[*].Outputs[?OutputKey=='$1'].OutputValue")
	[ ${#role} -eq 0 ] && return
	echo $role
}

# Get the s3 bucket names in the user region
aws_s3_buckets() {
	myBuckets=$(aws s3api list-buckets --region $(get_blj_prop awsRegion) --query "Buckets[].Name")
	[ ${#myBuckets} -eq 0 ] || [ "$myBuckets" == "None" ] && return
	echo $myBuckets
}

# Lists stacks available on AWS. If status arg provided, only return stacks with the given status.
# Param 1 (optional) Stack status
aws_stacks() {
	awsStacks=
	if [ $# -eq 1 ]; then
		awsStacks=$(aws cloudformation describe-stacks --query "Stacks[?StackStatus=='$1'].StackName")
		[ ${#awsStacks} -eq 0 ] || [ "$awsStacks" == "None" ] && return
	else
		awsStacks=$(aws cloudformation describe-stacks --query "Stacks[].StackName")
		[ ${#awsStacks} -eq 0 ] || [ "$awsStacks" == "None" ] && return
	fi
	echo $awsStacks
}

# Get a prop stored in $blj_aws_config
# Param 1 Prop name
# Param 2 (optional) Default value
get_blj_prop() {
	prop=$(cat $blj_aws_config | grep $1)
	val=${prop/$1=}
	[ ${#val} -eq 0 ] && val=$2
	exists=$(echo $prop | grep "$1=")
	[ ${#exists} -gt 0 ] || [ ${#val} -gt 0 ] && response=$(set_blj_prop $1 $val)
	echo $val
}

# Init AWS Config properties file: $blj_aws_config
# Param 1 (optional) if true, use existing $blj_aws_config
init_aws_config() {
	[ ! -d $aws_home_dir/history ] && mkdir $aws_home_dir/history
	if [ -f $blj_aws_config ] && [ "$1" != "true" ]; then
		mv $blj_aws_config $aws_home_dir/history/blj_config-$(date "+%Y-%m-%d.%H.%M.%S")
	fi
	[ $# -eq 0 ] && echo $sheBang > $blj_aws_config && chmod 770 $blj_aws_config
	
	x=$(get_blj_prop awsAccountId $(aws ec2 describe-security-groups --group-names Default --query SecurityGroups[0].OwnerId))
	x=$(get_blj_prop awsEc2SpotPer 70)
	x=$(get_blj_prop awsEc2AcquisitionStrategy SPOT)
	x=$(get_blj_prop awsEc2InstanceType t2.micro)
	x=$(get_blj_prop awsProfile default)
	x=$(get_blj_prop awsRegion $(aws configure get region))
	x=$(get_blj_prop dockerImgVersion latest)
	x=$(get_blj_prop dockerUser biolockj)
	
	set_blj_prop access_id $(aws_local_prop aws_access_key_id $aws_cred_file)
	set_blj_prop secret_key $(aws_local_prop aws_secret_access_key $aws_cred_file)
}

# Remove AWS property - delete the line from the file
# Param 1 - prop name 
rm_blj_prop() {
	TMP=~/.temp.txt
	conf=$(cat $blj_aws_config)
	[ ${#conf} -eq 0 ] && return
	props=("$conf")
	for arg in ${props[@]}; do
		[ "$arg" == "$sheBang" ] && continue
		IFS2=$IFS && IFS="=" && tokens=( ${arg} )
		IFS=$IFS2 && [ "${tokens[0]}" != "$1" ] && echo ${arg} >> $TMP
	done
	rm $blj_aws_config
	[ -f $TMP ] && mv $TMP $blj_aws_config
}

# Set a prop stored in $blj_aws_config
# Param 1 Prop name
# Param 2 Prop value
set_blj_prop() {
	prop=$(cat $blj_aws_config | grep $1)
	exists=$(echo $prop | grep "$1=${2/\[/\\\[}")
	[ ${#exists} -gt 0 ] && return
	rm_blj_prop $1
	echo "$1=$2" >> $blj_aws_config
	#echo "Set aws config:  $1=$2"
}

# Build stack config using awsStack and awsAccountId references and build the roles
set_stack_config() {
	awsStack=$(get_blj_prop awsStack)
	awsAccountId=$(get_blj_prop awsAccountId)
	set_blj_prop keyName $awsStack-KeyPair
	set_blj_prop computeEnv $awsStack-ComputeEnv
	set_blj_prop queueName $awsStack-Queue
	set_blj_prop serviceRole $(aws_role BatchServiceRoleArn)
	set_blj_prop iamFleetRole "arn:aws:iam::$awsAccountId:role/$(aws_role SpotIamFleetRoleArn)"
	set_blj_prop jobRoleArn $(aws_role ECSTaskRole)
	set_blj_prop instanceRole "arn:aws:iam::$awsAccountId:instance-profile/$(aws_role IamInstanceProfileArn)"
	set_blj_prop bastionGroup $(aws_role BastionSecurityGroup)
	set_blj_prop subnet $(aws_role Subnet)
	set_blj_prop efsID $(aws_role FileSystemId)
	set_blj_prop headNodeLaunchTemplate $(aws_role HeadNodeLaunchTemplateId)
	set_blj_prop batchNodeLaunchTemplate $(aws_role BatchNodeLaunchTemplateId)
}

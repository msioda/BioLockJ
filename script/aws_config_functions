#!/bin/bash
##############################################################
##                                                          ##
##  This script is used for AWS Confif functions            ##
##                                                          ##
##############################################################
. $BLJ/script/blj_functions

aws_cred_file=$local_aws_dir/credentials
blj_aws_config=$local_aws_dir/blj_config
aws_args=

# MANUAL TESTING OVERRIDE VALUES
aws_dev_config() {
	set_aws_config dockerImgVer latest
	set_aws_config ec2SpotPer 70
	set_aws_config ec2Type SPOT
	set_aws_config myS3 blj-2019-03-25
	set_aws_config stackName bljStack-2019-03-25
}

# Print AWS Config report
aws_report_config() {
	echo "AWS Config Report"
	props=( "$aws_args" )
	for arg in ${props[@]}; do
		IFS2=$IFS && IFS="=" && tokens=( $arg )
		IFS=$IFS2 && echo "----> ${tokens[0]}=${tokens[1]}"
	done
}

# Init Config before aws_select_functions will run
init_aws_config() {
	set_aws_config awsProfile $(aws_profile)
	set_aws_config dockerAccount $(named_arg "$@" docker.user)
	set_aws_config dockerImgVer $(named_arg "$@" docker.imgVersion)
	set_aws_config ec2SpotPer $(named_arg "$@" aws.ec2SpotPer)
	set_aws_config ec2Type $(named_arg "$@" aws.ec2InstanceType)
	set_aws_config myS3 $(named_arg "$@" aws.s3)
	set_aws_config stackName $(named_arg "$@" aws.stack)
	set_aws_config region $(named_arg "$@" aws.region)
	set_aws_config account_id $(aws ec2 describe-security-groups --group-names Default --query SecurityGroups[0].OwnerId)
	
	dockId=$(named_arg "$aws_args" dockerAccount)
	dockerImgVer=$(named_arg "$aws_args" dockerImgVer)
	[ ${#dockId} -eq 0 ] && set_aws_config dockerAccount $DOCKER_HUB_USER
	[ ${#dockerImgVer} -eq 0 ] && set_aws_config dockerImgVer latest
}

# Remove AWS Config property
# Param 1 - prop name 
remove_aws_config() {
	if [ ${#aws_args} -gt 0 ]; then
		val=$(named_arg "$aws_args" $1) 
		[ ${#val} -gt 0 ] && aws_args="${aws_args/$1=$val}"
	fi
}

# Move previous config to history folder and create a new config with current properties
save_aws_config() {
	chmod 770 $blj_aws_config && [ -f $blj_aws_config ] && [ ! -d $local_aws_dir/history ] && mkdir $local_aws_dir/history
	[ -f $blj_aws_config ] && mv $blj_aws_config $local_aws_dir/history/blj_config-$(date "+%Y-%m-%d.%H.%M.%S")
	echo "# Config generated to run BioLockJ on the AWS cloud: $(date)" > $blj_aws_config
	props=("$aws_args")
	for arg in ${props[@]}; do
		IFS2=$IFS && IFS="=" && tokens=( $arg )
		IFS=$IFS2 && [ ${#tokens[*]} -eq 2 ] && echo "${tokens[0]}=${tokens[1]}" >> $blj_aws_config
	done
}

# Add a named arg to aws_args + return the new arg value
# Param 1 - arg name
# Param 2 - arg value
set_aws_config() {
	remove_aws_config $1
	if [ $# -eq 2 ]; then
		[ ${#aws_args} -gt 0 ] && aws_args="$aws_args $1=$2"
		[ ${#aws_args} -eq 0 ] && aws_args="$1=$2"
	fi
	aws_report_config
}



# Build stack config using stack and account_id references and build the roles
set_stack_config() {
	stack=$(named_arg "$aws_args" stack)
	account_id=$(named_arg "$aws_args" account_id)
	set_aws_config keyName $stack-KeyPair
	set_aws_config computeEnv $stack-ComputeEnv
	set_aws_config queueName $stack-Queue
	set_aws_config serviceRole $(aws_role $stack BatchServiceRoleArn)
	set_aws_config iamFleetRole "arn:aws:iam::$account_id:role/$(aws_role $stack SpotIamFleetRoleArn)"
	set_aws_config jobRoleArn $(aws_role $stack ECSTaskRole)
	set_aws_config instanceRole "arn:aws:iam::$account_id:instance-profile/$(aws_role $stack IamInstanceProfileArn)"
	set_aws_config bastiionGroup $(aws_role $stack BastionSecurityGroup)
	set_aws_config batchGroup $(named_arg "$aws_args" bastiionGroup)
	set_aws_config subNet $(aws_role $stack Subnet)
	set_aws_config efsID $(aws_role $stack FileSystemId)
	set_aws_config headNodeLaunchTemplate $(aws_role $stack HeadNodeLaunchTemplateId)
	set_aws_config batchNodeLaunchTemplate $(aws_role $stack BatchNodeLaunchTemplateId)
}

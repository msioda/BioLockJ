#!/bin/bash
###################################################################
##                                                               ##
##  This script contains common functions used in BioLockJ.      ##
##                                                               ##
###################################################################
. "${BLJ_SCRIPT}/docker_config"
. "${BLJ_LIB}"

alias bljb="build_blj_only"
alias bljd="build_blj_only; clearDock; push_blj_only"
alias bljp="push_blj_only"
alias dclone="run_docker_clone"
alias docker_build="docker_cmd build"
alias docker_push="docker_cmd push"
alias docker_pull="docker_cmd pull"

# Build only Docker images that contain $BLJ/dist/BioLockJ.jar
build_blj_only() {
	$(get_cmd build java_module)
	$(get_cmd build biolockj_controller)
}

# Remove old Docker images
# docker stop = SIG TERM, after timeout period, tries SIG KILL
clearDock() {
	echo "Stop/remove all containers & remove old images..."
	containers=$(docker ps -aq)
	runningProcs=$(docker ps -q)
	images=$(docker images -f "dangling=true" -q) 
	[ ${#runningProcs} -gt 0 ] && echo "run CMD [ docker stop -t 30 $runningProcs ]" && docker stop -t 10 $runningProcs && runningProcs=$(docker ps -q)
	[ ${#runningProcs} -gt 0 ] && echo "run CMD [ docker kill -s SIGINT $runningProcs ]" && docker kill -s SIGINT $runningProcs && runningProcs=$(docker ps -q)
	[ ${#runningProcs} -gt 0 ] && echo "run CMD [ docker kill $runningProcs ]" && docker kill $runningProcs
	[ ${#containers} -gt 0 ] && echo "run CMD [ docker rm $containers ]" && docker rm $containers
	[ ${#images} -gt 0 ] && echo "run CMD [ docker rmi $images ]" && docker rmi $images
	echo "All containers + stale images = REMOVED"
	dockls
}

# Instantiate Docker bash shell for image + map ${BLJ_PROJ} to ${EFS_PROJ}
# Param $1 = Docker image name (without user prefix)
# Param $2 = input directory
# Param $3 = optional "dev" param which overrides container $BLJ with localhost $BLJ
dock() {
	img=${1} && [ ${#1} -eq 0 ] && img="biolockj_controller"
	inDir="" && [ ${#2} -gt 0 ] && inDir="-v \"${2}\":\"${BLJ_INPUT}\":ro "
	args="" && [ ${#3} -gt 0 ] && args="${3} "
	echo -e  "Run Docker CMD -->  [ docker run --rm ${args}${inDir}-v \"${DOCK_SOCK}\":\"${DOCK_SOCK}\" -v \"${HOME}\":\"${BLJ_HOST_HOME}\" -v \"${BLJ_PROJ}\":\"${EFS_PROJ}\":delegated -it $(dock_id)/${img} /bin/bash  ]"
	docker run --rm ${args}${inDir}-v "${DOCK_SOCK}":"${DOCK_SOCK}" -v "${HOME}":"${BLJ_HOST_HOME}" -v "${BLJ_PROJ}":"${EFS_PROJ}":delegated -it $(dock_id)/${img} /bin/bash
}

# Instantiate Docker bash shell for biolockj_controller with  
# Param $1 - input directory
# Param $2 - (optional) additional args
dockCon() {
	dock biolockj_controller "${1}" ${2}
}

# Get configured Docker account ID
dock_id() {
	echo "${DOCKER_ID}"
}

# Get configured Dockerfile directory
docker_dir() {
	echo "${DOCKER_DIR}"
}

# Single function used to build, pull, push, and removed Docker images.
# Images are built in order of depedencies and size.
# Param 1 - command (build|pull|push|rmi)
# Param 2 - (optional) number of images to build
# Param 3 - (optional) Start with this image number (if given a 2) start with blj_bash
docker_cmd() {
	ind=0 && startInd=1 && num=${2} && displayNum=${2} && [ $# -eq 3 ] && startInd=${3}
	[ $# -eq 1 ] && displayNum="ALL" && num=100
	echo "STARTED Docker ${1} ${displayNum} Docker images starting with index #${startInd}..."
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} blj_basic)" && $(get_cmd ${1} blj_basic) #0
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} blj_bash)" && $(get_cmd ${1} blj_bash)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} blj_basic_py2)" && $(get_cmd ${1} blj_basic_py2)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} blj_basic_java)" && $(get_cmd ${1} blj_basic_java)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} java_module)" && $(get_cmd ${1} java_module)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} biolockj_controller)" && $(get_cmd ${1} biolockj_controller) #5
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} kraken_classifier_dbfree)" && $(get_cmd ${1} kraken_classifier_dbfree)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} kraken2_classifier_dbfree)" && $(get_cmd ${1} kraken2_classifier_dbfree)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} knead_data_dbfree)" && $(get_cmd ${1} knead_data_dbfree)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} metaphlan2_classifier_dbfree)" && $(get_cmd ${1} metaphlan2_classifier_dbfree)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} r_module)" && $(get_cmd ${1} r_module)  #10
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} rdp_classifier)" && $(get_cmd ${1} rdp_classifier)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} qiime_classifier)" && $(get_cmd ${1} qiime_classifier)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} metaphlan2_classifier)" && $(get_cmd ${1} metaphlan2_classifier)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} knead_data) " && $(get_cmd ${1} knead_data) 
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} kraken_classifier)" && $(get_cmd ${1} kraken_classifier) #15
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} kraken2_classifier)" && $(get_cmd ${1} kraken2_classifier)
	ind=$((ind+1)) && $(exe_cmd) && echo "$(get_cmd ${1} humann2_classifier)" && $(get_cmd ${1} humann2_classifier) #17
	echo "COMPLETED Docker ${1} for ${displayNum} modules starting with index #${startInd}!"
}

# Used by docker_cmd to build and push number of modules given, or all modules if no params
# Param 1 - (optional) Limit build to first ${1} modules
# Param 2 - (optional) Start with this image # ${2}
docker_deploy() {
	docker_cmd "build" ${1} ${2}
	clearDock
	docker_cmd "push" ${1} ${2}
	clearDock
}

# List all Doker images & containers
dockls() {
	docker images && docker container ls --all
}

# Check start index and number of images to build to return TRUE or FALSE
exe_cmd() {
	[ $ind -ge $startInd ] && [ $num -gt $((ind-startInd)) ]
}

# Used by docker_cmd to reference Dockerfiles
# Param 1 - Docker command (build|pull|push|rmi)
# Param 2 - Docker image
get_cmd() {
	cmd="${1}" && target="$(dock_id)/${2}"
	if [ "${1}" == "build" ]; then
		bjm="${1} --build-arg BLJ_DATE=$(date +%s) --build-arg VER=$(biolockj -v)"
		cmd="${1}" && target="${target} $(docker_dir) -f $(docker_dir)/${2}.Dockerfile" 
		[ "${2}" == "biolockj_controller" ] && cmd="${bjm} --build-arg DOCKER_CLIENT=$DOCKER_VER"
		[ "${2}" == "java_module" ] && cmd="${bjm}"
		cmd="${cmd} -t"
	fi
	echo docker ${cmd} ${target}
}
# Launch a new bash shell for a running Docker container 
# Param $1 = Docker container name or ID, if undefined use 1st ID
goDock() {
	count=$(docker ps -q| head -1)
	if [ $# -eq 0 ]; then id="$(docker ps -q | head -n 1)"; else id="${1}"; fi
	docker exec -ti ${id} /bin/bash
}

# Deploy only Docker images that contain $BLJ/dist/BioLockJ.jar
push_blj_only() {
	$(get_cmd push java_module)
	$(get_cmd push biolockj_controller)
}

# Run a clone of the last biolockj_controller container
# Very useful to debug after failed Docker pipelines
run_docker_clone() {
	[ -f "/.dockerenv" ] && export DOCKER_CLONE_SCRIPT="${BLJ_HOST_HOME}/$(basename $DOCKER_CLONE_SCRIPT)"
	[ -x "${DOCKER_CLONE_SCRIPT}" ] && bash "${DOCKER_CLONE_SCRIPT}"
}

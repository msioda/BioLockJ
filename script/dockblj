#!/bin/bash
##################################################################################
##                                                                              ##
##  Script launches BioLockJ in a Docker container                              ##
##                                                                              ##
##  Bash env must include pipeline base directory: ${BLJ_PROJ}                  ##
##                                                                              ##
##  Required Parameters:                                                        ##
##  Config file path:       -c                                                  ##
##  Input directory:        -i <path>                                           ##
##                                                                              ##
##  Optional Parameters:                                                        ##
##  Aws flag:               -aws                                                ##
##  Docker flag:            -docker                                             ##
##  Metadata directory:     -m  <path>                                          ##
##  New email password:     -p  <new_pass>                                      ##
##  Restart flag:           -r  <directory>                                     ##
##                                                                              ##
##################################################################################
. $BLJ/script/blj_functions

[ ! -d "${BLJ_PROJ}" ] && exit_script "Error [ dockblj ]: Required bash variable BLJ_PROJ undefined"

# Populates the docker run BLJ_OPTIONS parameter
# Include -docker to run BioLockJ in a Docker container
# Include Docker container path to required Config file
# Include all directory paths the Docker container may need to map volumes when spawning Docker compute nodes
blj_options() {
	options="-docker -b $(blj_proj) -c $config -u ${HOME}"
	$(has_param $runAws) && options="$options $runAws"
	$(has_param $doRestart) && options="$options -r ${BLJ_PROJ}/${doRestart#$(blj_proj)/}"
	$(has_param $newPass) && options="$options -p $newPass"
	$(has_param $inputDir) && options="$options -i $inputDir"
	$(has_param $metaPath) && options="$options -m $metaPath"
	$(has_param $runDev) && $(has_param ${HOST_BLJ}) && options="$options -blj ${HOST_BLJ}"
	$(has_param $runDev) && $(has_param ${HOST_BLJ_SUP}) && options="$options -bljSup ${HOST_BLJ_SUP}"
	echo $options
}

# Return $HOST_BLJ_PROJ if called from within the biolockj_controller Docker container, otherwise return $BLJ_PROJ
# If dir ends with "/" trim it off
blj_proj() {
	$(has_param $inDocker) && !$(has_param "${HOST_BLJ_PROJ}") && exit_script "Error [ dockblj ]: Required env variable HOST_BLJ_PROJ undefined"
	if $(has_param $inDocker); then bljProj="${HOST_BLJ_PROJ}"; else bljProj="${BLJ_PROJ}"; fi
	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi
	$(has_param $bljProj) && echo "${bljProj}" && return
	exit_script "Error [ dockblj ]: Required env variable BLJ_PROJ undefined"
}

# Get Docker image - add port, entrypoint, anc command if launching GUI
get_docker_img() {
	cmd=$DOCKER_HUB_USER/biolockj_controller	
	$(has_param $launchGui) && cmd="-p 8080:3000 --entrypoint '/bin/bash' $cmd -c 'npm start'"
	echo "${cmd}"
}

# Get mapped  Docker volumes
get_volumes() {
	vols="-v /var/run/docker.sock:/var/run/docker.sock -v $(blj_proj):${EFS_PROJ}:delegated"
	$(has_param $runAws) && "${vols} -v ${EC2_HOME}:${EC2_HOME} -v ${EFS}:${EFS}"
	
	if $(has_param $launchGui); then
		vols="${vols} -v ${BLJ}/web_app/logs:/log:delegated -v ${BLJ}/resources/config/gui:${EFS_CONFIG} "
	else
		vols="${vols} -v $inputDir:${EFS_INPUT} -v $(dirname $config):${EFS_CONFIG}"
		$(has_param $metaPath) && vols="${vols} -v $metaPath:${EFS_META}"
	fi
	
	$(has_param $runDev) && $(has_param ${HOST_BLJ}) && vols="${vols} -v ${HOST_BLJ}:/app/biolockj"
	$(has_param $runDev) && $(has_param ${HOST_BLJ_SUP}) && vols="${vols} -v ${HOST_BLJ_SUP}:/app/blj_support"
	
	echo "${vols}"
}

# Boolean evaluation if single argument passed exists with a non-zero size
has_param() {
	[ ${#1} -gt 0 ]
}

# Call the docker run command with the correct parameters
run_docker() {
	echo "execute[ docker run -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img) ]"
	docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) "$(get_docker_img)"
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
verify_host_dir() {
	#echo "validate Host Dir: $# + $1"
 	[ $# -eq 2 ] && [ ! -d "${1}" ] && exit_script "Error [ dockblj ]: $2 directory not found: $1"
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
verify_host_file() {
	#echo "validate Host Dir: $# + $1"
	[ $# -eq 2 ] && [ ! -f "${1}" ] && exit_script "Error [ dockblj ]: $2 file not found: $1"
}

# Verify paths are valid, if dockblj is not run inside a Docker container
verify_inputs() {
	$(has_param $doRestart) && verify_host_dir $doRestart Restart
	$(has_param $config) && verify_host_file $config Config
	$(has_param $metaPath) && verify_host_dir $metaPath Metadata
	! $(has_param $inputDir) && exit_script "Error [ dockblj ]: The -i parameter must reference a single input directory"
	dirPath=( ${inputDir//, } )
	[ ${#dirPath[@]} -gt 1 ] && exit_script "Error [ dockblj ]: The -i parameter must reference a single input directory"
	verify_host_dir $dirPath Input
}

launchGui=$(arg_exists "$@" -gui)

if $(has_param $launchGui); then
	echo "CMD dockblj...launching GUI"
else
	echo "CMD dockblj...launching BioLockJ pipeline"
fi

runDev=$(arg_exists "$@" -dev)
inDocker=$(arg_exists "$@" -docker)
runAws=$(arg_exists "$@" -aws)
config=$(named_arg "$@" -c)
inputDir=$(named_arg "$@" -i)
metaPath=$(named_arg "$@" -m)
newPass=$(named_arg "$@" -p)
doRestart=$(named_arg "$@" -r)
if ! $(has_param $inDocker); then
	$(has_param "${BLJ_SUP}") && HOST_BLJ_SUP="${BLJ_SUP}" 
	$(has_param $launchGui) && verify_inputs 
fi

$(has_param $runDev) && echo "Running DEV mode!"
	
run_docker

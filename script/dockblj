#!/bin/bash
###############################################################################
##  Script launches BioLockJ via Docker + creates $DOCKER_CLONE_SCRIPT       ##
##  Bash env must include pipeline base directory: ${BLJ_PROJ}               ##
##                                                                           ##
##  Required Parameters (If gui arg passed, no other args required)          ##
##  Note, all params (other than blj & blj_sup) can use only 1st letter      ##
##  Config file path:          config  <file_path>                           ##
##                                                                           ##
##  Optional Parameters:                                                     ##
##  Aws flag:                  aws                                           ##
##  Use local BLJ flag:        blj                                           ##
##  Use local BLJ_SUP flag:    blj_sup                                       ##
##  Run GUI flag:              gui                                           ##
##  New email password:        pass    <new_password>                        ##
##  Restart flag:              restart <dir_path>                            ##
###############################################################################
. "${DOCKER_LIB}"

GUI_PORT=8080

startGuiContainer() {
	! $(null_var $runGui)
}

# Populate docker run env variable $BLJ_OPTIONS 
# Always include vars to map Host paths: Config, $BLJ_PROJ, and $HOME.
# In AWS mode, add a indicator, otherwise include the Host path for pipeline input. 
# These paths are used by biolockj_controller to map Docker volumes for java_module containers
blj_options() {

	if $(inDockerContainer); then
		options="${BLJ_OPTIONS}"
	else # on host machine
		options="-u ${HOME} -b $(blj_proj) -h $(hostname)"
		! $(null_var $blj) && options="${options} -blj ${BLJ}"
		! $(null_var $blj_sup) && options="${options} -blj_sup ${BLJ_SUP}"
	fi
	
	$(startGuiContainer) && echo "${options}" && return

	# -i is required if not launching the WebApp GUI 
	options="${options} -i ${inputDir}" 
	
	! $(null_var $restartDir) && options="${options} -r ${BLJ_PROJ}/${restartDir#$(blj_proj)/}"
	! $(null_var $newPass) && options="${options} -p $newPass"
	! $(null_var $metaPath) && options="${options} -m $metaPath"
	! $(null_var $primerPath) && options="${options} -t $primerPath"
	! $(null_var $runAws) && options="${options} ${runAws}"
	echo "${options} -c ${config}"
}

# If dockblj called by biolockj_controller Docker container in GUI mode, set BLJ_PROJ based on the $BLJ_OPTIONS
# env var, otherwise return $BLJ_PROJ if called from a host machine.  If dir ends with "/" trim it off
blj_proj() {
	if $(inDockerContainer) && [ ${#BLJ_OPTIONS} -gt 0 ]; then
		found='false' && opts=( "${BLJ_OPTIONS}" )
		args=("$@") && i=0 && name='' && numArgs=${#args[*]} && out=''
		for arg in ${z[@]}; do
    		arg=$(echo $arg | sed 's/^\(-\)*//')
    		[ "${found}" == "true" ] && bljProj="${arg}" && break
    		[ "${arg}" == "b" ] && found="true" && continue
		done		
	else
		bljProj="${BLJ_PROJ}"
	fi
	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi
	$(null_var $bljProj) && exit_script "Error [ blj_proj ]: Required env variable BLJ_PROJ undefined"
	echo "${bljProj}"
}

# Build a script that can be used to launch a clone of the
# Param 1 - Full Docker run command
build_clone_script() {
	args="$@"
	if [ "${args: -1}" == "&" ]; then
		len=$((${#args}-1))
		args="${args:0:len}"
	fi

	img="$(dock_id)/biolockj_controller"
	cmd=${args/$img/-ti $img /bin/bash} 
	$(startGuiContainer) && cmd=${cmd/npm start}
	$(inDockerContainer) && DOCKER_CLONE_SCRIPT="${BLJ_HOST_HOME}/$(basename $DOCKER_CLONE_SCRIPT)"
	
	echo "#!/bin/bash" > "${DOCKER_CLONE_SCRIPT}"
	echo "# This script launches a clone of the last biolockj_controller (same env vars + volumes)" >> "${DOCKER_CLONE_SCRIPT}"
	echo "${cmd}" >> "${DOCKER_CLONE_SCRIPT}"
	chmod 777 "${DOCKER_CLONE_SCRIPT}"
	echo "dockblj created \"${DOCKER_CLONE_SCRIPT}\" -->  This script will launch a clone of the current biolockj_controller (same env vars + volumes)"
	echo "alias \"dclone\" can be used to run \"${DOCKER_CLONE_SCRIPT}\""
}

# Get Docker image - add port, entrypoint, anc command if launching GUI
get_docker_img() {
	cmd=$(dock_id)/biolockj_controller
	if $(startGuiContainer); then 
		echo "-p ${GUI_PORT}:3000 --expose ${GUI_PORT} -w /app/biolockj/web_app ${cmd} npm start"
	else echo "${cmd}"; fi
	
}

# Get mapped  Docker volumes
get_volumes() {
	vols="-v ${DOCK_SOCK}:${DOCK_SOCK} -v ${HOME}:${BLJ_HOST_HOME}:delegated"
	if $(null_var $runAws); then
		vols="${vols} -v $(blj_proj):${EFS_PROJ}:delegated"
		if $(startGuiContainer); then
			vols="${vols} -v ${BLJ}/resources/config/gui:${BLJ_CONFIG}:delegated"
			[ -f "$(which aws)" ] && [ -d "$(dirname $(dirname $(which aws)))" ] && vols="${vols} -v $(dirname $(dirname $(which aws))):${AWS_ROOT}"
		else
			vols="${vols} -v $inputDir:${BLJ_INPUT}:ro -v $(dirname $config):${BLJ_CONFIG}:ro"
			! $(null_var $metaPath) && vols="${vols} -v $metaPath:${EFS}/metadata:ro"
			! $(null_var $primerPath) && vols="${vols} -v $primerPath:${BLJ_PRIMER}:ro"
		fi
		! $(null_var $blj) && vols="${vols} -v ${blj}:/app/biolockj:ro"
		! $(null_var $blj_sup) && vols="${vols} -v ${blj_sup}:/app/blj_support:ro"
	else
		vols="${vols} -v ${EFS}:${EFS}:delegated"
	fi
	echo "${vols}"
}

# Boolean evaluation if single argument passed exists with a non-zero size
# Param 1 - Script arg
null_var() {
	[ ${#1} -eq 0 ]
}

# Print and execute the docker run command with the correct volumes and env variables
run_docker() {
	runInBak='' && $(startGuiContainer) && runInBak=" &"
	cmd="docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img)${runInBak}"
	if $(startGuiContainer); then 
		cloneCmd="docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(dock_id)/biolockj_controller"
	else
		cloneCmd="docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img)${runInBak}"
	fi
	
	printf "\n---------> Execute CMD [  ${cmd}  ] \n\n"
	build_clone_script "${cloneCmd}"
	if $(startGuiContainer); then
		docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) $(get_docker_img) &
	else
		docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) $(get_docker_img)
	fi
}

# Read script args and bash env vars
# Param 1 - Array of dockblj script args
scan_script_and_env_args() {
	runGui='' && runAws='' && blj='' && blj_sup=''
	$(containsElement gui $@) && runGui=gui
	$(containsElement aws $@) && runAws=aws
	$(containsElement blj $@) && blj="${BLJ}"
	$(containsElement blj_sup $@) && blj_sup="${BLJ_SUP}"
	config=$(named_arg $@ c)
	newPass=$(named_arg $@ p)
	restartDir=$(named_arg $@ r)

	if ! $(null_var $config); then
		localConfig="${config}"
		$(inDockerContainer) && localConfig="${BLJ_CONFIG}/$(basename $config)"
		inputDir="$(get_property $localConfig input.dirPaths)"
		metaPath="$(get_property $localConfig metadata.filePath)" && [ ${#metaPath} -gt 0 ] && metaPath="$(dirname $metaPath)"
		primerPath="$(get_property $localConfig trimPrimers.filePath)" && [ ${#primerPath} -gt 0 ] && primerPath="$(dirname $primerPath)"
	fi
}

# Start the local browswer
startBrowser() {
	sleep 6 # See also: https://stackoverflow.com/questions/3124556/clean-way-to-launch-the-web-browser-from-shell-script#3124750
	if which xdg-open > /dev/null; then
		xdg-open http://localhost:${GUI_PORT}
	elif which gnome-open > /dev/null; then
		gnome-open http://localhost:${GUI_PORT}
	elif which python > /dev/null; then
		python -mwebbrowser http://localhost:${GUI_PORT}
	else
		echo "Web browser not found on localhost!"
	fi
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
# Param 1 - System path
verify_dir() {
 	[ ! -d "${1}" ] && exit_script "Error [ dockblj.verify_dir ]: Parameter \"${1}\" not found"
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
# Param 1 - System path
verify_file() {
	[ ! -f "${1}" ] && exit_script "Error [ dockblj.verify_file ]: Parameter \"${1}\" not found"
}

# Verify paths are valid, if dockblj is not run inside a Docker container
verify_inputs() {
	! $(null_var $inputDir) && dirPath=( ${inputDir//, } )
	$(null_var $inputDir) || [ ${#dirPath[@]} -gt 1 ] && exit_script "Error [ dockblj ]: The \"i\" parameter must reference a single input directory"
	verify_dir $dirPath
	verify_dir $BLJ_PROJ
	! $(null_var $restartDir) && verify_dir $restartDir
	! $(null_var $config) && verify_file $config
	! $(null_var $metaPath) && verify_dir $metaPath
	! $(null_var $primerPath) && verify_dir $primerPath	
}

printf "\n ---------> Execute CMD [  dockblj $(echo ${@})  ]\n"
scan_script_and_env_args $@
[ "${HOME}" != "${EC2_HOME}" ] && ! $(inDockerContainer) && ! $(startGuiContainer) && verify_inputs 
run_docker
$(containsElement gui $@) && startBrowser

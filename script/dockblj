#!/bin/bash
##################################################################################
##                                                                              ##
##  Script launches BioLockJ in a Docker container                              ##
##                                                                              ##
##  Bash env must include pipeline base directory: $BLJ_PROJ                    ##
##                                                                              ##
##  Required Parameters:                                                        ##
##  Config file path:       -c                                                  ##
##  Input directory:        -i <path>                                           ##
##                                                                              ##
##  Optional Parameters:                                                        ##
##  Aws flag:               -aws                                                ##
##  Docker flag:            -docker                                             ##
##  Metadata directory:     -m  <path>                                          ##
##  New email password:     -p  <new_pass>                                      ##
##  Restart flag:           -r  <directory>                                     ##
##                                                                              ##
##################################################################################
. $BLJ/script/blj_functions

[ ! -d "$BLJ_PROJ" ] && echo "Exit program - Required bash variable BLJ_PROJ undefined" && exit 1

# Pass script input parameters + the argument value
# Return value if found in input parameters
arg_exists() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args; do
		[ "$arg" == "$target" ] && echo "$target" && return
	done
}

# Populates the docker run BLJ_OPTIONS parameter
# Include -docker to run BioLockJ in a Docker container
# Include Docker container path to required Config file
# Include all directory paths the Docker container may need to map volumes when spawning Docker compute nodes
blj_options() {
	options="-docker -b $(blj_proj) -C $(dirname $config) -c /config/$(basename $config) -u $HOME" 
	$(has_param $doRestart) && options="$options -r $(restart_dir)"
	$(has_param $newPass) && options="$options -p $newPass"
	$(has_param $inputDir) && options="$options -i $inputDir"
	$(has_param $metaPath) && options="$options -m $metaPath"
	$(has_param $HOST_BLJ) && options="$options -blj $HOST_BLJ"
	$(has_param $HOST_BLJ_SUP) && options="$options -bljSup $HOST_BLJ_SUP"
	echo $options
}

# Return $HOST_BLJ_PROJ if called from within a docker container (such as blj_webapp), otherwise return $BLJ_PROJ
blj_proj() {
	bljProj=$BLJ_PROJ
	if $(has_param $inDocker); then
		bljProj=$HOST_BLJ_PROJ
		if $(has_param $bljProj); then
			bljProj=$HOST_BLJ_PROJ
		else
			echo "Exit program - Required env variable HOST_BLJ_PROJ undefined" && exit 1
		fi
	fi
	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi
	$(has_param $bljProj) && echo $bljProj && return
	echo "Exit program - Required env variable BLJ_PROJ undefined" && exit 1
}

# Return boolean evaluation if single argument passed exists with a non-zero size
has_param() {
	[ ${#1} -gt 0 ]
}

# Get the Docker manager module (aws_manager or blj_manager) with $DOCKER_HUB_USER user prefix
manager_type() {
	if $(has_param $runAws); then
		echo $DOCKER_HUB_USER/aws_manager
	else
		echo $DOCKER_HUB_USER/blj_manager
	fi
}

# Pass script input parameters + the argument name
# Named arguments must be formated: "argName=argValue"
named_arg() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args; do
		IFS="="
		tokens=( $arg )
		[ ${#tokens[*]} -eq 2 ] && [ ${tokens[0]} == $target ] && echo ${tokens[1]} && return
	done
}

# Get the internal Docker restart directory
restart_dir() {
	echo "/pipelines/${doRestart#$(blj_proj)/}"
}

# Call the docker run command with the correct parameters
# If parameter is passed, add it to blj_options
run_docker() {
	D_SOCK="/var/run/docker.sock"
	opt="$(blj_options)"
	[ ${#1} -gt 0 ] && opt="$opt $1"
	if $(has_param $metaPath); then
		if $(has_param $HOST_BLJ) && $(has_param $HOST_BLJ_SUP); then
			echo "execute[ docker run --rm -e 'BLJ_OPTIONS=$opt' -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $metaPath:/meta -v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj -v $HOST_BLJ_SUP:/app/blj_support $(manager_type) ]"
			docker run --rm -e "BLJ_OPTIONS=$opt" -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $metaPath:/meta \
				-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj -v $HOST_BLJ_SUP:/app/blj_support $(manager_type)
		elif $(has_param $HOST_BLJ); then
			echo "execute[ docker run --rm -e 'BLJ_OPTIONS=$opt' -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $metaPath:/meta -v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj $(manager_type) ]"
			docker run --rm -e "BLJ_OPTIONS=$opt" -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $metaPath:/meta \
				-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj $(manager_type)
		else
			echo "execute[ docker run --rm -e 'BLJ_OPTIONS=$opt' -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $metaPath:/meta -v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config $(manager_type)]"
			docker run --rm -e "BLJ_OPTIONS=$opt" -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $metaPath:/meta \
				-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config $(manager_type)
		fi
	else
		if $(has_param $HOST_BLJ) && $(has_param $HOST_BLJ_SUP); then
			echo "execute[ docker run --rm -e 'BLJ_OPTIONS=$opt' -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj -v $HOST_BLJ_SUP:/app/blj_support $(manager_type) ]"
			docker run --rm -e "BLJ_OPTIONS=$opt" -v $D_SOCK:$D_SOCK -v $inputDir:/input \
				-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj -v $HOST_BLJ_SUP:/app/blj_support $(manager_type)
		elif $(has_param $HOST_BLJ); then
			echo "execute[ docker run --rm -e 'BLJ_OPTIONS=$opt' -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj $(manager_type) ]"
			docker run --rm -e "BLJ_OPTIONS=$opt" -v $D_SOCK:$D_SOCK -v $inputDir:/input \
				-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $HOST_BLJ:/app/biolockj $(manager_type)
		else
			echo "execute[ docker run --rm -e 'BLJ_OPTIONS=$opt' -v $D_SOCK:$D_SOCK -v $inputDir:/input -v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config $(manager_type) ]"
			docker run --rm -e "BLJ_OPTIONS=$opt" -v $D_SOCK:$D_SOCK -v $inputDir:/input \
				-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config $(manager_type)
		fi
	fi
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
verify_host_dir() {
	#echo "validate Host Dir: $# + $1"
 	[ $# -eq 2 ] && [ ${#1} -gt 0 ] && [ ! -d $1 ] && echo "Exit script - $2 directory not found: $1" && exit 1
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
verify_host_file() {
	#echo "validate Host Dir: $# + $1"
	[ $# -eq 2 ] && [ ${#1} -gt 0 ] && [ ! -f $1 ] && echo "Exit script - $2 file not found: $1" && exit 1
}

# Verify paths are valid, if dockblj is not run inside a Docker container
verify_inputs() {
	$(has_param $doRestart) && verify_host_dir $doRestart Restart
	$(has_param $config) && verify_host_file $config Config
	$(has_param $metaPath) && verify_host_dir $metaPath Metadata
	! $(has_param $inputDir) && echo "Exit script. The -i parameter must reference a single input directory" && exit 1
	IFS=","
	dirPath=( $inputDir )
	[ ${#dirPath[@]} -gt 1 ] && echo "Exit script. The -i parameter must reference a single input directory" && exit 1
	verify_host_dir $dirPath Input
}

echo "Running dockblj..."
runAws=$(named_arg "$@" "-aws")
config=$(named_arg "$@" "-c")
inDocker=$(arg_exists "$@" "-docker")
inputDir=$(named_arg "$@" "-i")
metaPath=$(named_arg "$@" "-m")
newPass=$(named_arg "$@" "-p")
doRestart=$(named_arg "$@" "-r")

! $(has_param $inDocker) && verify_inputs

run_docker
status=$?
[ $status -ne 0 ] && echo "Exit script - Docker $(manager_type) pipeline failed" && exit $status

if $(has_param $runAws); then
	run_docker -aws
	status=$?
	[ $status -ne 0 ] && echo "Exit script - Docker $(manager_type) pipeline failed" && exit $status
fi
echo "Exit script - Docker $(manager_type) pipeline success!"

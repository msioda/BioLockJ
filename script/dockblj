#!/bin/bash
###############################################################################
##  Script launches BioLockJ via Docker + creates $DOCKER_CLONE_SCRIPT       ##
##  Bash env must include pipeline base directory: ${BLJ_PROJ}               ##
##                                                                           ##
##  Required Parameters (If gui arg passed, no other args required)          ##
##  Note, all params (other than blj & blj_sup) can use only 1st letter      ##
##  Config file path:          config  <file_path>                           ##
##                                                                           ##
##  Optional Parameters:                                                     ##
##  Aws flag:                  aws                                           ##
##  Use local BLJ flag:        blj                                           ##
##  Use local BLJ_SUP flag:    blj_sup                                       ##
##  Run GUI flag:              gui                                           ##
##  New email password:        pass    <new_password>                        ##
##  Restart flag:              restart <dir_path>                            ##
###############################################################################
. "${DOCKER_LIB}"

GUI_PORT=8080

# Populate docker run env variable $BLJ_OPTIONS 
# Always include vars to map Host paths: Config, $BLJ_PROJ, and $HOME.
# In AWS mode, add a indicator, otherwise include the Host path for pipeline input. 
# These paths are used by biolockj_controller to map Docker volumes for java_module containers
blj_options() {
	if $(in_docker_env); then
		options="${BLJ_OPTIONS}"
	else
		options="-u ${HOME} -b $(blj_proj) -h $(hostname)"
		$mapBlj && options="${options} -blj ${BLJ}"
		$mapBljSup && options="${options} -blj_sup ${BLJ_SUP}"
	fi
	
	if $startGUI; then 
		echo "${options}"
	else
		options="${options} -i ${inputPath}" 
		$mapRestartDir && options="${options} -r ${BLJ_PROJ}/${restartPath#$(blj_proj)/}"
		$mapMetaDir && options="${options} -m $metaPath"
		$mapPrimerDir && options="${options} -t $primerPath"
		$(on_aws) && options="${options} -aws"
		$doChangePass && options="${options} -p $newPass"
		echo "${options} -c ${configPath}"
	fi
}

# If dockblj called by biolockj_controller Docker container in GUI mode, set BLJ_PROJ based on the $BLJ_OPTIONS
# env var, otherwise return $BLJ_PROJ if called from a host machine.  If dir ends with "/" trim it off
blj_proj() {
	if $(in_docker_env) && [ ${#BLJ_OPTIONS} -gt 0 ]; then
		found=false && opts=( "${BLJ_OPTIONS}" )
		args=("$@") && i=0 && name='' && numArgs=${#args[*]} && out=''
		for arg in ${z[@]}; do
    			arg=$(echo $arg | sed 's/^\(-\)*//')
    			$found && bljProj="${arg}" && break
    			[ "${arg}" == "b" ] && found=true
		done		
	else bljProj="${BLJ_PROJ}"; fi
	
	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi

	[ ${#bljProj} -eq 0 ] && exit_script "Error [ blj_proj ]: Required env variable BLJ_PROJ undefined"
	echo "${bljProj}"
}

# Build a script that can be used to launch a clone of the
# Param 1 - Full Docker run command
build_clone_script() {
	if $startGUI; then 
		args=( "docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(dock_id)/biolockj_controller" )
	else
		args=( "docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img)" )
	fi
	args=( "$args" )
	img="$(dock_id)/biolockj_controller"
	cmd=${args/$img/-ti $img /bin/bash} 
	$startGUI && cmd=${cmd/npm start}
	$(in_docker_env) && DOCKER_CLONE_SCRIPT="${BLJ_HOST_HOME}/$(basename $DOCKER_CLONE_SCRIPT)"
	echo "#!/bin/bash" > "${DOCKER_CLONE_SCRIPT}"
	echo "# This script launches a clone of the last biolockj_controller (same env vars + volumes)" >> "${DOCKER_CLONE_SCRIPT}"
	echo "${cmd}" >> "${DOCKER_CLONE_SCRIPT}"
	chmod 777 "${DOCKER_CLONE_SCRIPT}"
	echo "dockblj created \"${DOCKER_CLONE_SCRIPT}\" -->  This script will launch a clone of the current biolockj_controller (same env vars + volumes)"
	echo "alias \"dclone\" can be used to run \"${DOCKER_CLONE_SCRIPT}\""
}

# Get Docker image - add port, entrypoint, anc command if launching GUI
get_docker_img() {
	cmd=$(dock_id)/biolockj_controller
	if $startGUI; then 
		echo "-p ${GUI_PORT}:3000 --expose ${GUI_PORT} -w /app/biolockj/web_app ${cmd} npm start"
	else echo "${cmd}"; fi
}

# Get mapped  Docker volumes
get_volumes() {
	vols="-v ${DOCK_SOCK}:${DOCK_SOCK} -v ${HOME}:${BLJ_HOST_HOME}:delegated"
	if $(on_aws); then
		vols="${vols} -v ${EFS}:${EFS}:delegated"
	else
		vols="${vols} -v $(blj_proj):${EFS_PROJ}:delegated"
		if $startGUI; then
			vols="${vols} -v ${BLJ}/resources/config/gui:${BLJ_CONFIG}:delegated"
			[ -f "$(which aws)" ] && [ -d "$(dirname $(dirname $(which aws)))" ] && vols="${vols} -v $(dirname $(dirname $(which aws))):${APP_BIN}"
		else
			vols="${vols} -v $inputPath:${BLJ_INPUT}:ro -v $(dirname $configPath):${BLJ_CONFIG}:ro"
			$mapMetaDir && vols="${vols} -v $metaPath:${EFS}/metadata:ro"
			$mapPrimerDir && vols="${vols} -v $primerPath:${BLJ_PRIMER}:ro"
		fi
		$mapBlj && vols="${vols} -v ${BLJ}:/app/biolockj:ro"
		$mapBljSup && vols="${vols} -v ${BLJ_SUP}:/app/blj_support:ro"
	fi
	echo "${vols}"
}


# Run main script algorithm
# Param 1 - Array of dockblj script args
main() {
	printf "Execute CMD  --------->  dockblj $(echo $@) \n"
	parse_script_input $@
	! $startGUI && ! $(in_docker_env) && verify_inputs 
	print_docker_run_cmd
	build_clone_script
	run_docker
	$startGUI && startBrowser
}

# Return TRUE if running on AWS EC2 instance
on_aws() {
	[ "${HOME}" == "${EC2_HOME}" ]
}

# Read script args and bash env vars
# Param 1 - Array of dockblj script args
parse_script_input() {
	if $(containsElement gui $@); then startGUI=true; else startGUI=false; fi
	configPath=$(named_arg $@ c)
	newPass=$(named_arg $@ p)
	restartPath=$(named_arg $@ r)
	if [ $# -eq 1 ] && [ ${#configPath} -eq 0 ] && ! $startGUI; then
		[ -f "${1}" ] && configPath="${1}" && console_log "Run Docker-BioLockJ pipeline w/ Config --> ${1}" 
		[ -d "${1}" ] && restartPath="${1}" && console_log "Restart Docker-BioLockJ pipeline --> ${1}" 
	fi

	if [ ${#configPath} -gt 0 ]; then
		console_log "Host config path: $configPath"
		if $(in_docker_env);
			then localPath="${BLJ_CONFIG}/$(basename $configPath)"
			else localPath="${configPath}"
		fi
		[ "${configPath}" != "${localPath}" ] && console_log "Docker config path: $localPath"
		inputPath="$(get_property $localPath input.dirPaths)" && console_log "input.dirPaths: $inputPath"
		metaPath="$(get_property $localPath metadata.filePath)" && [ ${#metaPath} -gt 0 ] && metaPath="$(dirname $metaPath)" && console_log "metadata.filePath: $metaPath"
		primerPath="$(get_property $localPath trimPrimers.filePath)" && [ ${#primerPath} -gt 0 ] && primerPath="$(dirname $primerPath)" && console_log "trimPrimers.filePath: $primerPath"
	fi
	set_arg_flags $@
}

# Print the docker run command to the console.
print_docker_run_cmd() {
	printableCmd="docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img)"
	$startGUI && printableCmd="${printableCmd} &"
	printf "Execute CMD  --------->  ${printableCmd} \n"
}

# Build and execute docker run command.  If running GUI, must run in background with "&"
run_docker() {
	if $startGUI; then
		docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) $(get_docker_img) &
	else
		docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) $(get_docker_img)
	fi
}

# Set arg flags
# Params - $@ --> all script input args
set_arg_flags() {
	if [ ${#configPath} -gt 0 ]; then mapConfigDir=true; else mapConfigDir=false; fi
	if [ ${#inputPath} -gt 0 ]; then mapInputDir=true; else mapInputDir=false; fi
	if [ ${#metaPath} -gt 0 ]; then mapMetaDir=true; else mapMetaDir=false; fi
	if [ ${#primerPath} -gt 0 ]; then mapPrimerDir=true; else mapPrimerDir=false; fi
	if [ ${#restartPath} -gt 0 ]; then mapRestartDir=true; else mapRestartDir=false; fi
	if [ ${#newPass} -gt 0 ]; then doChangePass=true; else doChangePass=false; fi
	if $(containsElement blj $@); then mapBlj=true; else mapBlj=false; fi
	if $(containsElement blj_sup $@); then mapBljSup=true; else mapBljSup=false; fi
}

# Start the local browswer
startBrowser() {
	sleep 6 # See also: https://stackoverflow.com/questions/3124556/clean-way-to-launch-the-web-browser-from-shell-script#3124750
	if which xdg-open > /dev/null; then
		xdg-open http://localhost:${GUI_PORT}
	elif which gnome-open > /dev/null; then
		gnome-open http://localhost:${GUI_PORT}
	elif which python > /dev/null; then
		python -mwebbrowser http://localhost:${GUI_PORT}
	else
		console_log "Web browser not found on localhost!"
	fi
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
# Param 1 - System path
verify_dir() {
 	[ ! -d "${1}" ] && exit_script "Error [ dockblj.verify_dir() ]: Parameter \"${1}\" not found"
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
# Param 1 - System path
verify_file() {
	[ ! -f "${1}" ] && exit_script "Error [ dockblj.verify_file() ]: Parameter \"${1}\" not found"
}

# Verify paths are valid, if dockblj is not run inside a Docker container
verify_inputs() {
	console_log "Verify host machine file paths"
	$mapInputDir && dirPath=( ${inputPath//, } )
	! $mapInputDir || [ ${#dirPath[@]} -gt 1 ] && exit_script "Error [ dockblj.verify_inputs() ]: The \"i\" parameter must reference a single input directory"
	verify_dir $dirPath
	verify_dir $BLJ_PROJ
	$mapRestartDir && verify_dir $restartPath
	$mapConfigDir && verify_file $configPath
	$mapMetaDir && verify_dir $metaPath
	$mapPrimerDir && verify_dir $primerPath
	console_log "Verifications complete"
}

# See line 125 for main() function
main $@

#!/bin/bash
##############################################################################
##                                                                          ##
##  Script launches BioLockJ in a Docker container                          ##
##                                                                          ##
##  Bash env must include pipeline base directory: $BLJ_PROJ                ##
##                                                                          ##
##  Required Parameters                                                     ##
##  Config file path:       config                                          ##
##  Input directories:      inputDirPaths (commma separated, no spaces)     ##
##                                                                          ##
##  Optional parameters:                                                    ##
##                                                                          ##
##  Admin email password    changePassword                                  ##
##  Metadata directory:     metadataFilePath                                ##
##  Primer directory:       trimPrimersFilePath                             ##
##  Restart flag:           -r                                              ##
##  Docker flag:            -docker                                         ##
##                                                                          ##
##############################################################################
. $BLJ/script/blj_functions

[ ! -d "$BLJ_PROJ" ] && echo "Exit program - Required bash variable BLJ_PROJ undefined" && exit 1

# Pass script input parameters + the argument value
# Return value if found in input parameters
arg_exists() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args;
	do
		[ "$arg" == "$target" ] && echo "$target" && return
	done
}

# Pass script input parameters + the argument name
# Named arguments must be formated: "argName=argValue"
get_named_arg() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args; 
	do
		IFS="="
		tokens=( $arg )
		if [ ${#tokens[*]} -eq 2 ] && [ ${tokens[0]} == $target ]; then
			echo ${tokens[1]} && return
		fi
	done
}


# Verify host file exists, if dockblj is not deployed inside a Docker container
validateHostFile() {
	#echo "validate Host Dir: $# + $1"
	[ ${#inDockerContainer} -eq 0 ] && [ $# -eq 2 ] && [ ! -f "$1" ] && echo "Exit script - $2 file not found: $1" && exit 1
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
validateHostDir() {
	#echo "validate Host Dir: $# + $1"
 	[ ${#inDockerContainer} -eq 0 ] && [ $# -eq 2 ] && [ ! -d "$1" ] && echo "Exit script - $2 directory not found: $1" && exit 1
}

# Verify paths are valid, if dockblj is not deployed inside a Docker container
validate_input() {
	validateHostFile $config Config
	validateHostDir $metadataFilePath Metadata
	validateHostDir $trimPrimersFilePath Primer
	if [ ${#inputDirPaths} -lt 0 ]; then
		echo "Exit script - Input directory is required" && exit 1
	else
		IFS=","
		dirPaths=( $inputDirPaths )
		for dir in "$dirPaths"; do
			validateHostDir $dir "Input"
		done
	fi 
}

# Populates the docker run BLJ_OPTIONS parameter
# Include -D to run BioLockJ in a Docker container
# Include Docker container path to required Config file
# Include all directory paths the manager may need to map volumes in spawned Docker compute node instances
get_blj_options() {
	options="-D -b $BLJ_PROJ" 
	[ ${#restartPipeline} -gt 0 ] && options="$options $restartPipeline"
	[ ${#changePassword} -gt 0 ] && options="$options -p $changePassword"
	[ ${#config} -gt 0 ] && options="$options -C $(dirname $config) -c /config/$(basename $config)"
	[ ${#inputDirPaths} -gt 0 ] && options="$options -i $inputDirPaths"
	[ ${#metadataFilePath} -gt 0 ] && options="$options -m $metadataFilePath"
	[ ${#trimPrimersFilePath} -gt 0 ] && options="$options -t $trimPrimersFilePath"
	echo $options
}

# Print status message with GUI context and BLJ_OPTIONS
get_status_msg() {
	msg=""
	if [ ${#inDockerContainer} -gt 0 ]; then
		msg="Docker biolockj/webapp GUI"
	else
		msg="Host machine $BLJ/web_app GUI" 
	fi
	
	if [ ${#restartPipeline} -gt 0 ]; then 
		msg+=" restarting biolockj/manager Docker container"
	else
		msg+=" starting biolockj/manager Docker container"
	fi
	
	echo "$msg with BLJ_OPTIONS=$(get_blj_options)"
}

config=$(get_named_arg "$@" "config")
inputDirPaths=$(get_named_arg "$@" "inputDirPaths")
metadataFilePath=$(get_named_arg "$@" "metadataFilePath")
trimPrimersFilePath=$(get_named_arg "$@" "trimPrimersFilePath")
changePassword=$(get_named_arg "$@" "-p")
restartPipeline=$(arg_exists "$@" "-r")
inDockerContainer=$(arg_exists "$@" "-docker")

# Call function to verify input parameters are vaild
validate_input

# Call function to print status message
echo $(get_status_msg)

if [ ${#metadataFilePath} -gt 0 ] && [ ${#trimPrimersFilePath} -gt 0 ]; then
	docker run -e "BLJ_OPTIONS=$(get_blj_options)" -v /var/run/docker.sock:/var/run/docker.sock \
		-v $BLJ_PROJ:/pipeline:delegated -v $(dirname $config):/config -v $inputDirPaths:/input \
		-v $metadataFilePath:/meta -v $trimPrimersFilePath:/primer \
		--rm biolockj/manager
elif [ ${#metadataFilePath} -gt 0 ]; then	
	docker run -e "BLJ_OPTIONS=$(get_blj_options)" -v /var/run/docker.sock:/var/run/docker.sock \
		-v $BLJ_PROJ:/pipeline:delegated -v $(dirname $config):/config -v $inputDirPaths:/input \
		-v $metadataFilePath:/meta \
		--rm biolockj/manager 
elif [ ${#trimPrimersFilePath} -gt 0 ]; then	
	docker run -e "BLJ_OPTIONS=$(get_blj_options)" -v /var/run/docker.sock:/var/run/docker.sock \
		-v $BLJ_PROJ:/pipeline:delegated -v $(dirname $config):/config -v $inputDirPaths:/input \
		-v $trimPrimersFilePath:/primer \
		--rm biolockj/manager 
else
	docker run -e "BLJ_OPTIONS=$(get_blj_options)" -v /var/run/docker.sock:/var/run/docker.sock \
		-v $BLJ_PROJ:/pipeline:delegated -v $(dirname $config):/config -v $inputDirPaths:/input \
		--rm biolockj/manager 
fi

[ $? -ne 0 ] && echo "Exit script - docker run command failed"  

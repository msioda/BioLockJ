#!/bin/bash
##################################################################################
##  Script launches BioLockJ via Docker + creates $DOCKER_CLONE_SCRIPT          ##
##  Bash env must include pipeline base directory: ${BLJ_PROJ}                  ##
##                                                                              ##
##  Required Parameters (If -gui arg passed, no other args required)            ##
##  Config file path:          -c <file-path>                                   ##
##  Input directory:           -i <file-path>                                   ##
##                                                                              ##
##  Optional Parameters:                                                        ##
##  Aws flag:                  -aws                                             ##
##  Use local BLJ flag:        -blj                                             ##
##  Use local BLJ_SUP flag:    -blj_sup                                         ##
##  Run GUI flag:              -gui                                             ##
##  Metadata directory:        -m  <path>                                       ##
##  New email password:        -p  <new_password>                               ##
##  Restart flag:              -r  <directory-path>                             ##
##  Trim Primer file:          -t  <file-path>                                  ##
##                                                                              ##
##################################################################################
. "${DOCKER_LIB}"

DOCKER_ENV_FLAG="/.dockerenv"
GUI_PORT=8080

# Populate docker run env variable $BLJ_OPTIONS 
# Always include vars to map Host paths: Config, $BLJ_PROJ, and $HOME.
# In AWS mode, add -aws indicator, otherwise include the Host path for pipeline input. 
# These paths are used by biolockj_controller to map Docker volumes for java_module containers
blj_options() {
	options="-u ${HOME} -b $(blj_proj) -h $(hostname)" 
	
	$(var_not_null $overrideBLJ) && options="${options} -blj ${overrideBLJ}"
	$(var_not_null $overrideBLJ_SUP) && options="${options} -blj_sup ${overrideBLJ_SUP}"
	$(var_not_null $launchGui) && echo ${options} && return
	
	$(var_not_null $restartDir) && options="${options} -r ${BLJ_PROJ}/${restartDir#$(blj_proj)/}"
	$(var_not_null $newPass) && options="${options} -p $newPass"
	$(var_not_null $metaPath) && options="${options} -m $metaPath"
	$(var_not_null $primerPath) && options="${options} -t $primerPath"
	
	echo ${options} -i ${inputDir} -c ${config} ${runAws}
}

# If dockblj called by biolockj_controller Docker container in GUI mode, set BLJ_PROJ based on the $BLJ_OPTIONS
# env var, otherwise return $BLJ_PROJ if called from a host machine.  If dir ends with "/" trim it off
blj_proj() {
	if [ -f "${DOCKER_ENV_FLAG}" ] && $(var_exists BLJ_OPTIONS); then
		bljProj=$(named_arg "${BLJ_OPTIONS}" -b)
	else
		bljProj="${BLJ_PROJ}"
	fi

	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi
	! $(var_not_null $bljProj) && exit_script "Error [ dockblj.blj_proj ]: Required env variable BLJ_PROJ undefined"
	echo "${bljProj}"
}

# Build a script that can be used to launch a clone of the
# Param 1 - Full Docker run command
build_clone_script() {
	img="$(dock_id)/biolockj_controller"
	cmd=${@/$img/-ti $img /bin/bash} 
	$(var_not_null $launchGui) && cmd=${cmd/ npm start}

	echo "#!/bin/bash" > "${DOCKER_CLONE_SCRIPT}"
	echo "# This script launches a clone of the last biolockj_controller (same env vars + volumes)" >> "${DOCKER_CLONE_SCRIPT}"
	echo "${cmd}" >> "${DOCKER_CLONE_SCRIPT}"
	chmod 777 "${DOCKER_CLONE_SCRIPT}"
	echo "dockblj created \"${DOCKER_CLONE_SCRIPT}\" -->  This script will launch a clone of the current biolockj_controller (same env vars + volumes)"
	echo "alias \"dclone\" can be used to run \"${DOCKER_CLONE_SCRIPT}\""
}

# Get Docker image - add port, entrypoint, anc command if launching GUI
get_docker_img() {
	cmd=$(dock_id)/biolockj_controller
	$(var_not_null $launchGui) && echo "-p ${GUI_PORT}:3000 --expose ${GUI_PORT} -w /app/biolockj/web_app ${cmd} npm start"
	! $(var_not_null $launchGui) && echo "${cmd}"
}

# Get mapped  Docker volumes
get_volumes() {
	vols="-v ${DOCK_SOCK}:${DOCK_SOCK} -v ${HOME}:${BLJ_HOST_HOME}:delegated"
	if $(var_not_null $runAws); then
		vols="${vols} -v ${EFS}:${EFS}:delegated"
	else
		vols="${vols} -v $(blj_proj):${EFS_PROJ}:delegated"
		if $(var_not_null $launchGui); then
			vols="${vols} -v ${BLJ}/resources/config/gui:${BLJ_CONFIG}:delegated"
		else
			vols="${vols} -v $inputDir:${BLJ_INPUT}:ro -v $(dirname $config):${BLJ_CONFIG}:ro"
			$(var_not_null $metaPath) && vols="${vols} -v $metaPath:${BLJ_META}:ro"
			$(var_not_null $primerPath) && vols="${vols} -v $primerPath:${BLJ_PRIMER}:ro"
		fi
		
		$(var_not_null $overrideBLJ) && vols="${vols} -v ${overrideBLJ}:/app/biolockj:ro"
		$(var_not_null $overrideBLJ_SUP) && vols="${vols} -v ${overrideBLJ_SUP}:/app/blj_support:ro"
	fi
	echo "${vols}"
}

# Print and execute the docker run command with the correct volumes and env variables
run_docker() {
	cmd="docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img)"
	printf "\n---------> Execute CMD [  ${cmd}  ] \n\n"
	build_clone_script "${cmd}"
	docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) $(get_docker_img)
}

# Read script args and bash env vars
# Param 1 - Array of dockblj script args
scan_script_and_env_args() {
	launchGui=$(arg_exists "$@" -gui)
	runAws=$(arg_exists "$@" -aws)
	overrideBLJ=$(named_arg "$@" -blj)
	overrideBLJ_SUP=$(named_arg "$@" -blj_sup)
	! $(var_not_null $overrideBLJ) && overrideBLJ=$(arg_exists "$@" -blj) && [ ${#overrideBLJ} -gt 0 ] && overrideBLJ="${BLJ}" 
	! $(var_not_null $overrideBLJ_SUP) && overrideBLJ_SUP=$(arg_exists "$@" -blj_sup) && [ ${#overrideBLJ_SUP} -gt 0 ] && overrideBLJ_SUP="${BLJ_SUP}" 
	config=$(named_arg "$@" -c)
	inputDir=$(named_arg "$@" -i)
	metaPath=$(named_arg "$@" -m)
	newPass=$(named_arg "$@" -p)
	restartDir=$(named_arg "$@" -r)
	primerPath=$(named_arg "$@" -t)
}

# Start the local browswer
startBrowser() {
	sleep 2
	# See also: https://stackoverflow.com/questions/3124556/clean-way-to-launch-the-web-browser-from-shell-script#3124750
	if which xdg-open > /dev/null; then
		xdg-open http://localhost:${GUI_PORT}
	elif which gnome-open > /dev/null; then
		gnome-open http://localhost:${GUI_PORT}
	elif which python > /dev/null; then
		python -mwebbrowser http://localhost:${GUI_PORT}
	else
		echo "Web browser not found on localhost!"
	fi
}

# Boolean evaluation if single argument passed exists with a non-zero size
# Param 1 - Script arg
var_not_null() {
	[ ${#1} -gt 0 ]
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
# Param 1 - System path
verify_dir() {
 	[ ! -d "${1}" ] && exit_script "Error [ dockblj.verify_dir ]: Parameter \"${1}\" not found"
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
# Param 1 - System path
verify_file() {
	[ ! -f "${1}" ] && exit_script "Error [ dockblj.verify_file ]: Parameter \"${1}\" not found"
}

# Verify paths are valid, if dockblj is not run inside a Docker container
verify_inputs() {
	$(var_not_null $inputDir) && dirPath=( ${inputDir//, } )
	! $(var_not_null $inputDir) || [ ${#dirPath[@]} -gt 1 ] && exit_script "Error [ dockblj ]: The -i parameter must reference a single input directory"
	verify_dir $dirPath
	verify_dir $BLJ_PROJ
	$(var_not_null $restartDir) && verify_dir $restartDir
	$(var_not_null $config) && verify_file $config
	$(var_not_null $metaPath) && verify_dir $metaPath
	$(var_not_null $primerPath) && verify_file $primerPath	
}

printf "\n ---------> Execute CMD [  $(echo ${@})  ]\n\n"
scan_script_and_env_args $@

if $(var_not_null $launchGui); then
	# Execute run_docker in background to move on to next operation startBrowser
	run_docker &
	startBrowser
else
	verify_inputs 
	run_docker
fi

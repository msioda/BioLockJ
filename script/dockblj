#!/bin/bash
##################################################################################
##                                                                              ##
##  Script launches BioLockJ via Docker + creates $DOCKER_CLONE_SCRIPT          ##
##                                                                              ##
##  Bash env must include pipeline base directory: ${BLJ_PROJ}                  ##
##                                                                              ##
##  Required Parameters:                                                        ##
##  Config file path:       -c                                                  ##
##  Input directory:        -i <path>                                           ##
##                                                                              ##
##  Optional Parameters:                                                        ##
##  Aws flag:               -aws                                                ##
##  Docker flag:            -docker                                             ##
##  Metadata directory:     -m  <path>                                          ##
##  New email password:     -p  <new_pass>                                      ##
##  Restart flag:           -r  <directory>                                     ##
##                                                                              ##
##################################################################################
. "${DOCKER_LIB}"

cmd="dockblj ${@}"
printf "\n---------> Execute CMD [  ${cmd}  ] \n\n"

[ ${#DOCKER_ID} -eq 0 ] && exit_script "Error [ dockblj ]: Required bash variable DOCKER_ID undefined"
[ ! -d "${BLJ_PROJ}" ] && exit_script "Error [ dockblj ]: Required bash variable BLJ_PROJ undefined"

# Populate docker run env variable $BLJ_OPTIONS 
# Always include vars to map Host paths: Config, $BLJ_PROJ, and $HOME.
# In AWS mode, add -aws indicator, otherwise include the Host path for pipeline input. 
# These paths are used by biolockj_controller to map Docker volumes for java_module containers
blj_options() {
	if $(has_param $runAws); then
		options="-u ${EC2_HOME} -aws"
	else
		options="-u ${HOME}"
	fi
	$(has_param $doRestart) && options="$options -r ${BLJ_PROJ}/${doRestart#$(blj_proj)/}"
	$(has_param $newPass) && options="$options -p $newPass"
	$(has_param $inputDir) && options="$options -i $inputDir"
	$(has_param $metaPath) && options="$options -m $metaPath"
	$(has_param $runDev) && $(has_param ${HOST_BLJ}) && options="$options -blj ${HOST_BLJ}"
	$(has_param $runDev) && $(has_param ${HOST_BLJ_SUP}) && options="$options -bljSup ${HOST_BLJ_SUP}"
	echo "$options -b $(blj_proj) -c $config"
}

# Return $HOST_BLJ_PROJ if called from within the biolockj_controller Docker container, otherwise return $BLJ_PROJ
# If dir ends with "/" trim it off
blj_proj() {
	$(has_param $inDocker) && !$(has_param "${HOST_BLJ_PROJ}") && exit_script "Error [ dockblj ]: Required env variable HOST_BLJ_PROJ undefined"
	if $(has_param $inDocker); then bljProj="${HOST_BLJ_PROJ}"; else bljProj="${BLJ_PROJ}"; fi
	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi
	$(has_param $bljProj) && echo "${bljProj}" && return
	exit_script "Error [ dockblj ]: Required env variable BLJ_PROJ undefined"
}

# Build a script that can be used to launch a clone of the
# Param 1 - Full Docker run command
build_clone_script() {
	echo "#!/bin/bash" > "${DOCKER_CLONE_SCRIPT}"
	echo "# This script launches a clone of the last biolockj_controller (same env vars + volumes)" >> "${DOCKER_CLONE_SCRIPT}"
	echo ${@/$(get_docker_img)/-ti $(dock_id)/biolockj_controller /bin/bash} >> "${DOCKER_CLONE_SCRIPT}"
	chmod 777 "${DOCKER_CLONE_SCRIPT}"
	echo "This script will execute a Docker clone of your most recent pipeline --> ${DOCKER_CLONE_SCRIPT}"
	[ -f "${DOCKER_CLONE_SCRIPT}" ] && cat "${DOCKER_CLONE_SCRIPT}" & printf "\n"
}

# Get Docker image - add port, entrypoint, anc command if launching GUI
get_docker_img() {
	cmd=$(dock_id)/biolockj_controller	
	$(has_param $launchGui) && cmd="-p 8080:3000 --expose 8080 -w '$BLJ/web_app' --entrypoint '/bin/bash' $cmd -c 'npm start'"
	echo "${cmd}"
}

# Get mapped  Docker volumes
get_volumes() {
	if $(has_param $runAws); then
		vols="-v ${DOCK_SOCK}:${DOCK_SOCK} -v ${EC2_HOME}:${EC2_HOME}:ro -v ${EFS}:${EFS}:delegated"
	else
		vols="-v ${DOCK_SOCK}:${DOCK_SOCK} -v $(blj_proj):${EFS_PROJ}:delegated"
		if $(has_param $launchGui); then
			vols="${vols} -v ${BLJ}/web_app/logs:/log:delegated -v ${BLJ}/resources/config/gui:${BLJ_CONFIG}"
		else
			vols="${vols} -v $inputDir:${BLJ_INPUT}:ro -v $(dirname $config):${BLJ_CONFIG}:ro"
			$(has_param $metaPath) && vols="${vols} -v $metaPath:${BLJ_META}:ro"
		fi
	
		$(has_param $runDev) && $(has_param ${HOST_BLJ}) && vols="${vols} -v ${HOST_BLJ}:/app/biolockj:ro"
		$(has_param $runDev) && $(has_param ${HOST_BLJ_SUP}) && vols="${vols} -v ${HOST_BLJ_SUP}:/app/blj_support:ro"
	fi
	echo "${vols}"
}

# Boolean evaluation if single argument passed exists with a non-zero size
has_param() {
	[ ${#1} -gt 0 ]
}

# Print and execute the docker run command with the correct volumes and env variables
run_docker() {
	cmd="docker run --rm -e \"BLJ_OPTIONS=$(blj_options)\" $(get_volumes) $(get_docker_img)"
	printf "\n---------> Execute CMD [  ${cmd}  ] \n\n"
	build_clone_script "${cmd}"
	docker run --rm -e "BLJ_OPTIONS=$(blj_options)" $(get_volumes) "$(get_docker_img)"
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
verify_host_dir() {
	#echo "validate Host Dir: $# + $1"
 	[ $# -eq 2 ] && [ ! -d "${1}" ] && exit_script "Error [ dockblj ]: $2 directory not found: $1"
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
verify_host_file() {
	#echo "validate Host Dir: $# + $1"
	[ $# -eq 2 ] && [ ! -f "${1}" ] && exit_script "Error [ dockblj ]: $2 file not found: $1"
}

# Verify paths are valid, if dockblj is not run inside a Docker container
verify_inputs() {
	$(has_param $doRestart) && verify_host_dir $doRestart Restart
	$(has_param $config) && verify_host_file $config Config
	$(has_param $metaPath) && verify_host_dir $metaPath Metadata
	! $(has_param $inputDir) && exit_script "Error [ dockblj ]: The -i parameter must reference a single input directory"
	dirPath=( ${inputDir//, } )
	[ ${#dirPath[@]} -gt 1 ] && exit_script "Error [ dockblj ]: The -i parameter must reference a single input directory"
	verify_host_dir $dirPath Input
}

inDocker=$(arg_exists "$@" -docker)
launchGui=$(arg_exists "$@" -gui)
runAws=$(arg_exists "$@" -aws)
runDev=$(arg_exists "$@" -dev)

config=$(named_arg "$@" -c)
inputDir=$(named_arg "$@" -i)
metaPath=$(named_arg "$@" -m)
newPass=$(named_arg "$@" -p)
doRestart=$(named_arg "$@" -r)
if ! $(has_param $inDocker); then
	$(has_param "${BLJ_SUP}") && HOST_BLJ_SUP="${BLJ_SUP}" 
	$(has_param $launchGui) && verify_inputs 
fi

$(has_param $runDev) && echo "Run DEV mode!"
$(has_param $runAws) && echo "Run AWS mode!"

run_docker

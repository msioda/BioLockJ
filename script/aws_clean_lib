#!/bin/bash
##############################################################
##  This script is used for AWS core function + logic       ##
##############################################################

# Remove all job-definitions 
aws_deregister_job_defs() {
	count=0 && numComplete=0 && ids=$(aws batch describe-job-definitions --status ACTIVE --query "jobDefinitions[*].jobDefinitionArn")
	console_log "De-register ACTIVE job-definitions...${ids}" 
	while $(has_data $ids); do
		id=$(get_id $ids) && [ ${#id} -eq 0 ] && break
		! $(is_owner $id) && ids="${ids/$id}" && continue
		count=$[$count+1] && console_log "De-register Job-definition ARN #${count}: ${id}" && \
			aws batch deregister-job-definition --job-definition "${id}" && status=ACTIVE
		while [ ${#status} -gt 0 ] && [ "$status" != "INACTIVE" ]; do
			sleep 5 && status=$(aws batch describe-job-definitions --job-definitions ${id} --query "jobDefinitions[*].status")
		done
		[ "${ids/$id}" == "${ids}" ] && console_log "UNEXPECTED error - invalid ID: ${id}" && break
		ids="${ids/$id}" && ((numComplete++))
	done
	[ -f "$(get_docker_job_def_flag)" ] && rm $(get_docker_job_def_flag)
	console_log "De-registered ${numComplete}/${count} job-definitions"
	console_log "Check for any job-definitions with status != 'INACTIVE':"
	aws batch describe-job-definitions --query "jobDefinitions[?status!='INACTIVE']|[*]"
}

# Get 1st "arn*" value in list
# Param 1 - list containing arn values
aws_get_arn() {
	id='' && i=1
	while [ ${#id} -eq 0 ] || [ "${id:0:1}" != "a" ]; do
		id=$(get_id $1 $i) && ((i++))
	done
	echo "${id}"
}

# Remove AWS key_pairs + keyPair file
aws_rm_key_pairs() {
	count=0 && numComplete=0 && ids=$(aws ec2 describe-key-pairs --query "KeyPairs[*].KeyName")
	console_log "Deleting key-pairs...${ids}" 
	while $(has_data $ids); do
		id=$(get_id $ids) && [ ${#id} -eq 0 ] && break
		! $(is_owner $id) && ids="${ids/$id}" && continue
		count=$[$count+1] && console_log "Deleting key-pair ARN #${count}: ${id}" && aws ec2 delete-key-pair --key-name "${id}"
		[ "${ids/$id}" == "${ids}" ] && console_log "UNEXPECTED error - invalid ID: ${id}" && break
		ids="${ids/$id}" && ((numComplete++))
	done
	console_log "Deleted $numComplete/$count key-pairs" && myKey=$(key_file)
	[ ${#myKey} -gt 0 ] && chmod 700 "${myKey}" && rm -rf "${myKey}"
	console_log "Check for remaining key-pairs:" && aws ec2 describe-key-pairs
}

# Remove AWS Stacks
aws_rm_stacks() {
	count=0 && numComplete=0 && ids=$(aws cloudformation describe-stacks --query "Stacks[*].StackId")
	console_log "Deleting cloudformation stacks...${ids}" 
	while $(has_data $ids); do
		id=$(get_id $ids) && ! $(is_owner $id) && ids="${ids/$id}" && continue
		status=$(aws cloudformation describe-stacks --stack-name "${id}" --query "Stacks[*].StackStatus")
		[ "${status/DELETE}" != "${status}" ] && ids="${ids/$id}" && console_log "Skipping Stack [ ${id} ] status=${status}..." && continue
		count=$[$count+1] && console_log "Deleting stack ARN #${count}: ${id}" && aws cloudformation delete-stack --stack-name "${id}" && status=DO_CHECK
		while [ "${status}" != "DELETE_COMPLETE" ]; do
			sleep 10 && status=$(aws cloudformation describe-stacks --stack-name ${id} --query "Stacks[*].StackStatus")
		done
		[ "${ids/$id}" == "${ids}" ] && console_log "UNEXPECTED error - invalid ID: ${id}" && break
		ids="${ids/$id}" && ((numComplete++))
	done
	console_log "Deleted $numComplete/$count stacks" && console_log "Check for emaining stacks: $(aws cloudformation describe-stacks)"
}

# Remove S3 buckets
# Param 1 - (Optional) Set to "-all" to Remove all S3 buckets
aws_rm_s3_buckets() {
	count=0 && numComplete=0 && ids=$(aws s3api list-buckets --query "Buckets[*].Name")
	! $(has_data $ids) && console_log "No S3 buckets to remove" && return
	console_log "Deleting S3 buckets...${ids}" && buckets=( "$ids" )
	for bucket in ${buckets[@]}; do
		! $(is_owner $bucket) && continue
		aws s3 rb --force "${bucket}"  && count=$[$count+1] && console_log "Deleted s3-bucket #${count}: ${bucket}" && ((numComplete++))
	done
	console_log "Deleted $numComplete/$count S3-buckets" && console_log "Remaining S3-buckets:  $(aws s3api list-buckets)" 
}

# Clear all Pipeline Jobs
clear_jobs() {
	JQ=$(get_stack_param LowPriorityJobQueue) && [ "${awsEc2AcquisitionStrategy}" == "DEMAND" ] && JQ=$(get_stack_param HighPriorityJobQueue)
	clear_staged_jobs "${JQ}" SUBMITTED && clear_staged_jobs "${JQ}" PENDING && clear_staged_jobs "${JQ}" RUNNABLE && 
	clear_running_jobs "${JQ}" STARTING && clear_running_jobs "${JQ}" RUNNING && console_log "Check for remaining Jobs:" && aws batch list-jobs --job-queue "${JQ}"
}

# Cancel jobs from the given Job queue with given status
# Param 1 Job queue ARN
# Param 2 Job status
clear_staged_jobs() {
	count=0 && numComplete=0 && ids="$(get_aws_jobs ${1} ${2})" && console_log "Cancelling ${2} Jobs --> $ids"
	while $(has_data $ids); do
		id=$(get_id $ids) && count=$[$count+1] && [ ${#id} -eq 0 ] && break
		console_log "Cancel ${2} Job ARN #${count}: ${id}" && aws batch cancel-job --job-id "${id}" --reason "BAD PIPELINE" && ((numComplete++))
		[ "${ids/$id}" == "${ids}" ] && console_log "UNEXPECTED error - invalid ID: ${id}" && return
		ids="${ids/$id}"
	done
	console_log "Cancelled ${numComplete}/${count} ${2} jobs"
}

# Terminate jobs from the given Job queue with given status
# Param 1 Job queue ARN
# Param 2 Job status
clear_running_jobs() {
	count=0 && numComplete=0 && ids="$(get_aws_jobs ${1} ${2})" && console_log "Terminating ${2} Jobs --> $ids"
	while $(has_data $ids); do
		id=$(get_id $ids) && count=$[$count+1] && [ ${#id} -eq 0 ] && break
		console_log "Terminate ${2} Job ARN #${count}: ${id}" && aws batch terminate-job --job-id "${id}" --reason "BAD PIPELINE" && ((numComplete++))
		[ "${ids/$id}" == "${ids}" ] && console_log "UNEXPECTED error - invalid ID: ${id}" && return
		ids="${ids/$id}"
	done
	console_log "Terminated ${numComplete}/${count} ${2} jobs"
}

# Get jobs by queue and status
# Param 1 - Job queue ARN
# Param 2 - Job status
get_aws_jobs() {
	aws batch list-jobs --job-queue ${1} --job-status ${2} --query "jobSummaryList[].jobId"
}

# Extract ID from a list of IDs
# Param 1 - list of ids
# Param 2 - cut -f arg value
get_id() {
	if [ ${#2} -gt 0 ]; then cutArg=${2}; else cutArg=1; fi
	echo "${1}" | cut -f ${cutArg} -d " "
}

# Check input for valid data
# Param 1 - input data
has_data() {
	[ ${#1} -gt 0 ] && [ "${1}" != "None" ] && ! $(is_empty $1)
}

# Check if aws user name is part of input
# Param 1 - ID param with AWS user name
is_owner() {
	[ "${id/$(get_aws_user)}" != "${id}" ]
}

# Delee all EC2 instances and pem files locally and on AWS console.
# Param 1 - (Optional) Set to "-all" to Remove all EC2 instances for all StackNames
kill_head_nodes() {
	if [ "${1}" == "-all" ]; then
		ids=$(aws ec2 describe-instances --query "Reservations[].Instances[?State.Name!='terminated'].InstanceId")
	else
		ids=$(aws ec2 describe-instances --filter "Name=tag:StackName,Values=$(get_blj_prop aws.stack)" --query "Reservations[].Instances[?State.Name!='terminated'].InstanceId")
	fi
	console_log "Kill EC2 instances...${ids}" && runningIDs=$(aws ec2 describe-instances --query "Reservations[].Instances[?State.Name=='running'].InstanceId")
	[ ${#runningInstances} -gt 0 ] && aws ec2 stop-instances --instance-ids ${runningIDs} && console_log "The following EC2 instances have been stopped --> ${runningIDs}"
	[ ${#ids} -gt 0 ] && aws ec2 terminate-instances --instance-id "${ids}" && console_log "The following EC2 instances have been terminated --> ${ids}"
	console_log "Describe Remaining EC2 instances:" && 
		aws ec2 describe-instances --query "Reservations[].Instances[?State.Name!='terminated'].[InstanceId,State.Name,StateTransitionReason,Monitoring.State]"
	aws_rm_key_pairs
}

# De-register, disable, and remove all AWS objects.  
# This should stop all charges - but verify in the AWS console nothing is still running to be sure.
# Param 1 (optional) - Also remove S3 buckets if = "-s3"
# Param 2 (optional) - 
reset_aws() {
	kill_head_nodes && aws_deregister_job_defs && aws_rm_stacks && [ "${1}" == "-s3" ] && aws_rm_s3_buckets ${2}
}

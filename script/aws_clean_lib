#!/bin/bash
##############################################################
##                                                          ##
##  This script is used for AWS core function + logic       ##
##                                                          ##
##############################################################
. $BLJ/script/aws_config_lib

# Remove all job-definitions 
aws_deregister_job_defs() {
	aws_log "AWS CLEARING job-definitions..." 
	vals=$(aws batch describe-job-definitions --status ACTIVE --query "jobDefinitions[*].jobDefinitionArn")
	[ ${#vals} -eq 0 ] && aws_log "No ACTIVE job-definitions found" && return
	aws_log "List job-definitions --> $vals"
	count=0
	numComplete=0
	while [ ${#vals} -gt 0 ]; do
		((count++))
		module=$(aws_get_arn $vals) 
		aws_log "De-registering job-definition ARN #[$count]: ${module}"
		aws batch deregister-job-definition --job-definition ${module}
		status=ACTIVE
		while [ ${#status} -gt 0 ] && [ "$status" != "INACTIVE" ]; do
			sleep 10
			status=$(aws batch describe-job-definitions --job-definitions ${module} --query "jobDefinitions[*].status")
		done
		arnVals=${vals/${module}}
		[ "${arnVals}" != "${vals}" ] && aws_log "De-registered job-definition ARN #[$count]: ${module}" && ((numComplete++))
		[ "${arnVals}" == "${vals}" ] && aws_log "Failed to de-register job-definition ARN #[$count]: ${module}"
		vals="${arnVals}"	
		$(is_empty ${vals}) && break
	done
	aws_log "De-registered $numComplete/$count job-definitions"
	vals=$(aws batch describe-job-definitions)
	[ ${#vals} -eq 0 ] && aws_log "All job-definitions removed" && return
	aws_log "Remaining job-definitions with status!='INACTIVE':"
	aws batch describe-job-definitions --query "jobDefinitions[?status!='INACTIVE']|[*].jobDefinitionArn"
	rm $(get_docker_job_flag)
}

# Get 1st "arn*" value in list
# Param 1 - list containing arn values
aws_get_arn() {
	module=
	i=1
	while [ ${#module} -eq 0 ] || [ "${module:0:1}" != "a" ]; do
		module=$(echo $1 | cut -f $i -d " ")
		((i++))
	done
	echo "${module}"
}

# Remove all compute envs
aws_rm_compute_envs() {
	aws_log "CLEARING compute-environments..." 
	vals=$(aws batch describe-compute-environments --query "computeEnvironments[*].computeEnvironmentArn")
	[ ${#vals} -eq 0 ] && aws_log "No compute-environments found" && return
	aws_log "List compute-environments --> $vals"
	count=0
	numComplete=0
	while [ ${#vals} -gt 0 ]; do
		((count++))
		module=$(aws_get_arn $vals) 
		aws_log "Disabling compute-environment ARN #[$count]: ${module}"
		arnVals=${vals/${module}}
		$(is_empty $arnVals) && aws_log "ERROR, No compute-environment ARNs remaining" && break
		statusReason=$(aws batch describe-compute-environments --compute-environment ${module} --query "computeEnvironments[*].statusReason")
		if [ ${#statusReason} -gt 0 ] && [ "$statusReason" != "${statusReason/'Access denied'}" ]; then
			status=$(aws batch describe-compute-environments --compute-environment ${module} --query "computeEnvironments[*].state")
			[ "$status" != "DISABLED" ] && aws batch update-compute-environment --compute-environment ${module} --state DISABLED
			while [ ${#status} -gt 0 ] && [ "$status" != "DISABLED" ]; do
				sleep 10
				status=$(aws batch describe-compute-environments --compute-environment ${module} --query "computeEnvironments[*].state")
			done
			aws_log "Disabled compute-environment ARN #[$count]: ${module}" 
			aws batch delete-compute-environment --compute-environment ${module}
			aws_log "Deleted compute-environment ARN #[$count]: ${module}" && ((numComplete++))
			[ "${arnVals}" != "${vals}" ] && aws_log "Deleted compute-environment ARN #[$count]: ${module}" && ((numComplete++))
			[ "${arnVals}" == "${vals}" ] && aws_log "Failed to delete compute-environment ARN #[$count]: ${module}"
			vals="${arnVals}"
			$(is_empty ${vals}) && break
		else
			vals="${arnVals}"
			aws_log "Skipping compute-environment ARN #[$count]: ${module} - Reason: $statusReason" 
		fi
	done
	aws_log "Deleted $numComplete/$count compute-environments"
	vals=$(aws batch describe-compute-environments)
	[ ${#vals} -eq 0 ] && aws_log "All compute-environments removed" && return
	aws_log "Remaining compute-environments:" && aws batch describe-compute-environments
}

# Remove AWS key_pairs + keyPair file
aws_rm_key_pairs() {
	aws_log "CLEARING key-pairs..." 
	vals=$(aws ec2 describe-key-pairs --query "KeyPairs[*].KeyName")
	[ ${#vals} -eq 0 ] && aws_log "No key-pairs found" && return
	aws_log "List key-pairs --> $vals"
	count=0
	numComplete=0
	while [ ${#vals} -gt 0 ]; do
		((count++))
		module=$(echo $vals | cut -f 1 -d " ")
		$(is_empty ${module}) && break
		aws_log "Deleting key-pair ARN #[$count]: ${module}"
		aws ec2 delete-key-pair --key-name ${module}
		arnVals=${vals/${module}}
		[ "${arnVals}" != "${vals}" ] && aws_log "Deleted key-pair ARN #[$count]: ${module}" && ((numComplete++))
		[ "${arnVals}" == "${vals}" ] && aws_log "Failed to delete key-pair ARN #[$count]: ${module}"
		vals="${arnVals}"
		$(is_empty ${vals}) && break
	done
	aws_log "Deleted $numComplete/$count key-pairs"
	[ ${#key_file} -gt 0 ] && rm -rf $(key_file)
	vals=$(aws ec2 describe-key-pairs)
	[ ${#vals} -eq 0 ] && aws_log "All key-pairs removed" && return
	aws_log "Remaining key-pairs:" && aws ec2 describe-key-pairs
}

# Remove S3 buckets
aws_rm_s3_buckets() {
	aws_log "CLEARING S3 buckets..." 
	s3Buckets=$(aws s3api list-buckets --query "Buckets[*].Name")
	[ ${#s3Buckets} -eq 0 ] || [ "$s3Buckets" == "None" ] && aws_log "No s3-buckets found" && return
	aws_log "List s3-buckets --> $s3Buckets"
	count=0
	numComplete=0
	buckets=( "$s3Buckets" )
	for bucket in ${buckets[@]}; do
		((count++))
		aws_log "DELETING S3-bucket #[$count]: ${bucket}"
		aws s3 rb --force ${bucket}
		aws_log "Deleted s3-bucket #[$count]: ${bucket}" && ((numComplete++))
	done
	aws_log "Deleted $numComplete/$count s3-buckets"
	s3Buckets=$(aws s3api list-buckets)
	[ ${#s3Buckets} -eq 0 ] && aws_log "All s3-buckets deleted" && return
	aws_log "Remaining s3-buckets:" && aws s3api list-buckets
}

# Remove all AWS Stacks
aws_rm_stacks() {
	aws_log "CLEARING cloudformation stacks..." 
	vals=$(aws cloudformation describe-stacks --query "Stacks[*].StackId")
	[ ${#vals} -eq 0 ] || [ "$vals" == "None" ] && aws_log "No stacks found" && return
	aws_log "List stacks --> $vals"
	count=0
	numComplete=0
	while [ ${#vals} -gt 0 ]; do
		$(is_empty $vals) && break
		module=$(aws_get_arn $vals) && ((count++))
		status=$(aws cloudformation describe-stacks --stack-name ${module} --query "Stacks[*].StackStatus")
		arnVals=${vals/${module}}
		[ "${status}" != "${status/DELETE}" ] && vals=${arnVals} && continue
		aws_log "Deleting stack ARN #[$count]: ${module}"
		aws cloudformation delete-stack --stack-name ${module} 
		status=ACTIVE
		while [ "${status}" != "${status/DELETE}" ]; do
			sleep 10
			status=$(aws cloudformation describe-stacks --stack-name ${module} --query "Stacks[*].StackStatus")
		done
		[ "${arnVals}" != "${vals}" ] && aws_log "Deleted stack ARN #[$count]: ${module}" && ((numComplete++))
		[ "${arnVals}" == "${vals}" ] && aws_log "Failed to delete stack ARN #[$count]: ${module}"
		vals=${arnVals}
	done
	aws_log "Deleted $numComplete/$count stacks"
	vals=$(aws cloudformation describe-stacks)
	[ ${#vals} -eq 0 ] && aws_log "All stacks removed" && return
	aws_log "Remaining stacks (verify status==DELETE_COMPLETE):" && aws cloudformation list-stacks
}

# Amazon EC2 deletes all EBS volumes that were attached when the instance launched. 
kill_head_node() {
	aws_log "CLEARING EC2 instances..." 
	instances=$(aws ec2 describe-instances --query "Reservations[].Instances[?State.Name!='terminated'].InstanceId")
	runningInstances=$(aws ec2 describe-instances --query "Reservations[].Instances[?State.Name=='running'].InstanceId")
	[ ${#instances} -eq 0 ] && aws_log "No EC2 instances found" && return
	aws_log "List EC2 instance-ids --> ${instances}"
	[ ${#runningInstances} -gt 0 ] && aws ec2 stop-instances --instance-ids ${runningInstances} && \
		aws_log "The following EC2 instances have been stopped --> ${runningInstances}"
	[ ${#instances} -gt 0 ] && aws ec2 terminate-instances --instance-id "${instances}" && \
		aws_log "The following EC2 instances have been terminated --> ${runningInstances}"
	checkIn=$(aws ec2 describe-instances --query "Reservations[].Instances[?State.Name!='terminated']")
	[ ${#checkIn} -gt 0 ] && echo "Describe EC2 instances:" && \
		aws ec2 describe-instances --query "Reservations[].Instances[?State.Name!='terminated'].[InstanceId,State.Name,StateTransitionReason,Monitoring.State]"
}

# De-register, disable, and remove all AWS objects
# Param 1 (optional) - Also remove S3 buckets if = s3
nuke_aws() {
	refresh_aws_cache
 	kill_head_node && \
	aws_deregister_job_defs && \
	aws_rm_stacks && \
	aws_rm_key_pairs && \
	[ "${1}" == "s3" ] && aws_rm_s3_buckets
}

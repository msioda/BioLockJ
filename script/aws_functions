#!/bin/bash
##############################################################
##                                                          ##
##  This script is used for AWS core function + logic       ##
##                                                          ##
##############################################################
. $BLJ/script/aws_config_lib
. $BLJ/script/aws_clean_lib
. $BLJ/script/aws_head_node_lib

# Return TRUE if test value exist in the param list
# Param 1 Full parameter list
# Param 2 Test value
containsVar() { 
	[ $# -eq 2 ] && [ "$1" != "None" ] && [ "$2" != "None" ] && [ "${1/$2}" != "$1" ] 
}

# Build the compute environment
build_compute_env() {
	. $blj_aws_config
	status=$(aws batch describe-compute-environments --compute-environment $awsComputeEnv --query "computeEnvironments[*].state")
	statusReason=$(aws batch describe-compute-environments --compute-environment $awsComputeEnv --query "computeEnvironments[*].statusReason")

	allCompEnvs=$(aws batch describe-compute-environments --query "computeEnvironments[].computeEnvironmentName")
	enabledCompEnvs=$(aws batch describe-compute-environments --compute-environments $awsComputeEnv --query "computeEnvironments[?state=='ENABLED'].computeEnvironmentName")
	$(containsVar $enabledCompEnvs $awsComputeEnv) && echo "Found ENABLED Compute Environment: $awsComputeEnv: Status( $status ) $statusReason" && return
	$(containsVar $allCompEnvs $awsComputeEnv) && exit_script "Error [ aws_functions ]: Invalid configured AWS Compute Environment: $awsComputeEnv"

	echo "Building $awsComputeEnv"
	c1="type=$awsEc2AcquisitionStrategy,minvCpus=0,maxvCpus=112,desiredvCpus=0,instanceTypes=optimal,imageId=$awsAmi,subnets=$subnets,"
	c2="securityGroupIds=$bastionGroup,ec2KeyPair=$keyName,instanceRole=$instanceRole,bidPercentage=$awsEc2SpotPer,"
	c3="spotIamFleetRole=$iamFleetRole,launchTemplate={launchTemplateId=$batchNodeLaunchTemplate}"
	compResources=${c1}${c2}${c3}
	echo $(aws batch create-compute-environment --compute-environment-name $awsComputeEnv \
		--type MANAGED --state ENABLED --service-role $serviceRole --compute-resources "$compResources")
}

# Build Cloud-formation Stack
build_stack() {
	myStack=$(get_blj_prop awsStack)
	[ $(is_stack_complete $myStack) == "true" ] && echo "Confirmed existing AWS Stack is CREATE_COMPLETE: $myStack" && return 
	echo "Building cloud formation stack: $myStack. Please wait..."
	stackYml="file://$BLJ/resources/aws/StackEFS.yml"
	myIp=$(get_ip)/32
	params='ParameterKey=NetworkAccessIP,ParameterValue='
	aws cloudformation create-stack --template-body $stackYml --stack-name $myStack --capabilities CAPABILITY_IAM --parameters ${params}${myIp}
	numSecs=0
	echo "Building Stack: $myStack"
	while [ $(is_stack_complete $myStack) != "true" ]; do
		printf "." && sleep 5s && numSecs=$((numSecs+5))
	done
	echo "Secured to local IP: $myIp in $numSecs seconds"
}

# Build key pair + save to $aws_home_dir/$keyPair.pem file
cache_key_pair() {
	keyPair=$(get_blj_prop keyName)
	keyFile=$aws_home_dir/$keyPair.pem
	if [ ! -f $keyFile ]; then
		keys=$(aws ec2 describe-key-pairs)
		if [ "${keys/$keyPair}" == "$keys" ]; then
			aws ec2 create-key-pair --key-name $keyPair --query "KeyMaterial" > $keyFile
			echo "Security keys created.  Private key: $keyFile"
			#AWS keypair security requirement (perms 400)  
			chmod 400 $keyFile
			echo "Generated new: $keyFile"
		fi
	else
		echo "Found existing: $keyFile"
	fi
}

# Generate a name not found in $1, created using format $2-$date-index
# Param 1 (required) Key String
# Param 2 (optional) List of unavailable names
generate_name() {
	testVal="$1-$(date +%F)"
	[ $# -eq 1 ] && echo $testVal && return
	i=0
	maxI=1000
	while [ $i -lt $maxI ]; do
		[ "${2/$testVal}" == "$2" ] && echo $testVal && return
		i=$[$i+1] && testVal="$1-$(date +%F)-$i"
	done
	[ $i -eq $maxI ] && exit_script "Error [ aws_functions ]: Failed to generate unique name: $maxI names already exist!"
}

# Get current IP address
get_ip() {
	echo $(curl -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//' )
}

# Got existing S3 bucket names in your region
get_s3_buckets() {
	echo $(aws s3api list-buckets --region $(get_blj_prop awsRegion) --query "Buckets[].Name")
}

# Check status of Cloud Formation Stack
# Param 1 Stack name
is_stack_complete() {
	stacks=$(aws cloudformation describe-stacks --query "Stacks[].StackName")
	[ ${#stacks} -eq 0 ] || [ "$stacks" == "None" ] || [ $# -eq 0 ] && echo "false" && return
	stacks=$(aws cloudformation describe-stacks --query "Stacks[?StackStatus=='CREATE_COMPLETE']|[*].StackName")
	[ ${#stacks} -eq 0 ] || [ "$stacks" == "None" ] && echo "false" && return
	[ ${#stacks} -gt 0 ] && [ "${stacks/$myStack}" != "$stacks"  ] && echo "true" && return
	echo "false"
}

# Main method, called to launch BioLockJ on AWS from localhost
# Param 1 Pipeline Config file-path
run_aws() {
	[ $# -eq 0 ] || [ ! -f "$1" ] && exit_script "Error [ aws_config_lib ]: Required pipeline Config file not found: \"$1\""
	init_aws_config $1 && verify_cloud_formation && build_stack && set_stack_config && cache_key_pair && build_compute_env && launch_ec2_head_node
}

# Retrieve Linux AMI with name like amzn2-ami-ecs-hvm-2.0.20190301-x86_64-ebs AMI
verify_ami() {
	. $blj_aws_config
	ami=$awsAmi
	if [ ${#ami} -gt 0 ]; then
		ami=$(aws ec2 describe-images --image-ids $ami --query "Images[?State=='available'].ImageId")
		[ $ami == "None" ] && exit_script "Error [ aws_functions ]:  Unable to use configured AWS AMI: $ami"
		[ ${#ami} -gt 0 ] && echo "Found existing AWS Image: $ami" && return
	else
		ami=$(aws ec2 describe-images --region $awsRegion --owner amazon \
			--filter "Name=name,Values=amzn2-ami-ecs-hvm-*$(date +%Y)*x86_64-ebs" \
			--query "reverse(sort_by(Images, &CreationDate))[:1].ImageId" )
		[ ${#ami} -eq 0 ] || [ $ami == "None" ] && exit_script "Error [ aws_functions ]: Unable to obtain AWS AMI template from region $awsRegion"
		set_blj_prop awsAmi $ami
		echo "Set awsAmi=$ami"
	fi
}

# Build account config (and create s3 bucket if needed)
verify_cloud_formation() {

	set_blj_prop awsAmi ami-007571470797b8ffa
	set_blj_prop awsS3 blj-2019-03-31
	set_blj_prop awsStack bljStack-2019-03-31-4
	
	verify_ami
	verify_s3
	verify_stack
}

# Get ENABLED Compute Environment (if configured)
verify_comp_env() {
	configCompEnv=$(get_blj_prop awsComputeEnv)
	if [ ${#configCompEnv} -gt 0 ]; then
		allCompEnvs=$(aws batch describe-compute-environments --query "computeEnvironments[].computeEnvironmentName")
		enabledCompEnvs=$(aws batch describe-compute-environments --compute-environments $configCompEnv --query "computeEnvironments[?state=='ENABLED'].computeEnvironmentName")
		$(containsVar $enabledCompEnvs $configCompEnv) && echo "Found ENABLED Compute Environment: $configCompEnv" && return
		$(containsVar $allCompEnvs $configCompEnv) && exit_script "Error [ aws_functions ]: Invalid AWS Compute Environment: $configCompEnv" 
	fi
}

# Get the s3 bucket for pipeline output, if no bucket name specified, a new bucket is created
# Param 1 (optional) S3 bucket name
verify_s3() {
	. $blj_aws_config
	s3Bucket=
	if [ ${#awsS3} -gt 0 ]; then
		s3Bucket=$(aws s3api list-buckets --region $awsRegion  --query "Buckets[?Name=='$awsS3']|[*].Name")
		if [ ${#s3Bucket} -eq 0 ] || [ "$s3Bucket" == "None" ]; then
			exit_script "Error [ aws_functions ]:  S3 bucket [ awsS3=$awsS3 ] not found"
		fi
		echo "Found existing S3 Bucket $s3Bucket"
	else
		newS3=$(generate_name blj $(aws_s3_buckets))
		s3Bucket=$(aws s3api create-bucket --region $awsRegion --bucket $newS3)
		if [ ${#s3Bucket} -eq 0 ] || [ "$s3Bucket" == "None" ]; then
			exit_script "Error [ aws_functions ]:  Failed to create S3 bucket: $newS3"
		fi
		set_blj_prop awsS3 ${s3Bucket:1}
		echo "Set awsS3=${s3Bucket:1}"
	fi
}

# Return stack name.  If stack name arg given, verify is exists, else generate a new stack stack name.
verify_stack() {
	myStack=$(get_blj_prop awsStack)
	disabledStacks=$(aws cloudformation list-stacks --query "StackSummaries[].StackName")
	enabledStacks=$(aws_stacks CREATE_COMPLETE)
	if [ ${#myStack} -gt 0 ]; then
		if [ ${#disabledStacks} -gt 0 ] && [ "${disabledStacks/$myStack}" != "$disabledStacks" ]; then
			echo "Stack disabled on AWS cloud: $myStack"
			myStack=""
		elif [ ${#enabledStacks} -gt 0 ] && [ "${enabledStacks/$myStack}" != "$enabledStacks" ]; then
			echo "Use configured AWS Stack name: $myStack" && return
		fi
	fi
	
	if [ ${#myStack} -eq 0 ]; then
		echo "Generate new stack name"
		myStack=$(generate_name bljStack "$disabledStacks $enabledStacks")
		set_blj_prop awsStack $myStack
		echo "Set awsStack=$myStack"
	fi
}

#!/bin/bash
##########################################################################
##                                                                      ##
##  Script requires 1+ of the listed arguments parameter.               ##
##  Script requires  BioLockJ pipeline root directory: $BLJ_PROJ.       ##
##                                                                      ##
##  Pass optional param "-r" as 1st param to restart failed pipeline    ##
##                                                                      ##
##  Pass admin email password as 1st param to encode and store in the   ##
##  BioLockJ Config file (2nd param) instead of running a pipeline      ##
##                                                                      ##
##########################################################################
. "${AWS_LIB}"

BLJ_JAR=${BLJ}/dist/BioLockJ.jar

# Display BioLockJ release version
display_version() {
	[ -f "${BLJ}/.version" ] && cat "${BLJ}/.version" && return
	echo "Missing ${BLJ}/.version"
}

# Show the help menu
display_help() {
    echo "BioLockJ $(display_version) - UNCC Fodor Lab July 2018" 
    echo 'Most args can be passed using 1st letter only (with or without hyphens)'
    echo '    Run new pipeline:        config   <file_path>'
    echo '    Restart pipeline:        restart  <dir_path>'
    echo '    Encrypt password:        pass     <password>'
    echo '    Show help menu:          help'
    echo '    Show version:            version'
    echo '    Run on AWS:              aws'
    echo '    Run in Docker:           docker'
    echo '    Run Docker GUI:          gui'
    echo '    Mount Docker BLJ         blj'
    echo '    Mount Docker BLJ_SUP     blj_sup'
}

# Get dockblj scripts formatted named arg params
docker_args() {
	args='' && [ ${#runGui} -gt 0 ] && args="${runGui}"
	[ ${#blj} -gt 0 ] && args="${args} blj"
	[ ${#blj_sup} -gt 0 ] && args="${args} blj_sup"
	[ ${#newPass} -gt 0 ] && args="${args} p=${newPass}"
	[ ${#restart} -gt 0 ] && args="${args} r=${restart}"
	[ ${#config} -gt 0 ] && args="${args} c=${config}"
	echo "${args}" | xargs
}

# Convert input parameters to array of flag args and "name=value" arg pairs
get_params() {
	args=( "$@" ) && i=0 && name='' && numArgs=${#args[*]} && out=''
    for arg in ${args[@]}; do
    	arg=$(echo $arg | sed 's/^\(-\)*//')
    	$(containsElement $arg docker blj blj_sup gui aws) && out="${out} ${arg}" && continue
		[ ${#name} -eq 0 ] && name="${arg}" && continue
		out="${out} ${name}=${arg}" && name=''
    done

	[ "${out/'c='}" == "${out}" ] && [ "${out/'r='}" == "${out}" ] && [ ${#name} -gt 0 ] && out="${out} c=${name}"
   
#    [ ${#conf} -eq 0 ] && [ ${#restartDir} -eq 0 ] && [ ${#name} -gt 0 ] && out="${out} c=${name}"

    echo "${out}" | xargs
}

# The last arg must be the config path, if config & restart dir are undefined and we are looking at the last parameter
# Param 1 - Current script input param number
# Param 2 - Total number of script input params
lastArgMustBeConfig() {
	[ $1 -eq $2 ] && [ ${#conf} -eq 0 ] && [ ${#restart} -eq 0 ]
}

# Initialize script, read in script arguments
# Param 1 -  All script params
read_input_args() {
	blj=$(arg_exists ${@} blj)
	blj_sup=$(arg_exists ${@} blj_sup)
	runAws=$(arg_exists ${@} aws)
	runGui=$(arg_exists ${@} gui)
	runDocker=$(arg_exists ${@} docker)
	config=$(named_arg ${@} c)
	newPass=$(named_arg ${@} p)
	restart=$(named_arg ${@} r)
	if [ ${#runDocker} -eq 0 ]; then 
		[ ${#runGui} -gt 0 ] && runDocker="docker" && echo "Arg \"gui\" is only applicable in Docker mode --> starting Docker biolockj_controller container"
		[ ${#blj} -gt 0 ] && echo "Arg \"blj\" is only applicable in Docker mode so will be ignored"
		[ ${#blj_sup} -gt 0 ] && echo "Arg \"blj_sup\" is only applicable in Docker mode so will be ignored"
	fi
}

# Run biolockj by locally, on AWS, or in Docker mode based on script args
# Param 1 - args output by read_input_args $@ 
run_biolockj() {
	if [ ${#runAws} -gt 0 ]; then
		if [ ${#runGui} -gt 0 ]; then
			run_aws_gui
		else
			run_aws "${config}"
		fi
	elif [ ${#runDocker} -gt 0 ]; then
	 	[ ${#config} -gt 0 ] && echo "found config: $config"
		dockblj $(docker_args)
	else
		[ ${#config} -gt 0 ] && args="c=${config}" && [ ${#newPass} -gt 0 ] && args="${args} p=${newPass}"
		[ ${#runGui} -eq 0 ] && [ ${#restartDir} -eq 0 ] && [ ! -f "${config}" ] && 
			${BLJ}/script/biolockj -h && exit_script "Error [ biolockj ]:  \"${config}\" not found on filesystem"
		[ ! -d "${BLJ_PROJ}" ] && exit_script "Error [ biolockj ]: Required env variable BLJ_PROJ undefined: \"${BLJ_PROJ}\""
		[ ! -f "${BLJ_JAR}" ] && exit_script "Error [ biolockj ]: BioLockJ Jar file \"${BLJ_JAR}\" not found"
		start_pipeline "${@}"
	fi
}

# Start local pipeline by calling java to run the BioLockJ.jar on the given Config file
# Param 1 - array of script args "$@"
start_pipeline() {
	i=0 && initDir="$(most_recent_pipeline)" && pipeDir="${initDir}" && initJava=$(ps | grep -c java) 
	numJava=${initJava} && echo -e "Launching BioLockJ:  \"nohup java -jar ${BLJ_JAR} -b ${BLJ_PROJ} -u ${HOME} $@ >/dev/null 2>&1 &\""
	nohup java -jar "${BLJ_JAR}" -b "${BLJ_PROJ}" -u "${HOME}" $@ >/dev/null 2>&1 &
	[ $? != 0 ] && ${BLJ}/script/biolockj -h && exit_script "Error [ biolockj ]:  Unable to run ${BLJ_JAR}"
	printf "Initializing BioLockJ."
	while [ $i -lt 15 ] && [ "${initDir}" == "${pipeDir}" ] && [ ${initJava} -eq ${numJava} ]; do
		sleep 3 && i=$((i+1)) && printf "." && pipeDir="$(most_recent_pipeline)" && numJava=$(ps | grep -c java)
	done
	sleep 1 && echo "." && pipeDir="$(most_recent_pipeline)"
	if [ ${#restart} -gt 0 ] && [ ${numJava} -gt ${initJava} ]; then 
		echo "Restarting pipeline:  ${pipeDir}"
	elif [ ${#restart} -eq 0 ] && [ "${initDir}" != "${pipeDir}" ] || [ ${numJava} -gt ${initJava} ]; then 
		echo "Starting pipeline:  ${pipeDir}"
	elif [ ${#restart} -eq 0 ] && [ ${#runGui} -eq 0 ]; then
		echo "Pipeline may have failed to launch - check $BLJ_PROJ for new pipeline"
	fi
	echo "blj_go       -> Move to pipeline output directory"
	echo "blj_log      -> Tail pipeline log (accepts tail runtime parameters)"
	echo "blj_summary  -> View module execution summary"
}

arg1="${1//-}"
if [ $# -eq 1 ] && [ "${arg1:0:1}" == "v" ]; then
	display_version
elif [ $# -eq 1 ] && [ "${arg1:0:1}" == "h" ]; then
	display_help
else
	printf "\n ---------> Execute CMD [  biolockj $(echo ${@})  ]\n"
	args=$(get_params $@)
	read_input_args "${args}"
	run_biolockj "${args}"
fi
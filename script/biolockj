#!/bin/bash
##########################################################################
##                                                                      ##
##  Script requires 1+ of the listed arguments parameter.               ##
##  Script requires  BioLockJ pipeline root directory: $BLJ_PROJ.       ##
##                                                                      ##
##  Pass optional param "-r" as 1st param to restart failed pipeline    ##
##                                                                      ##
##  Pass admin email password as 1st param to encode and store in the   ##
##  BioLockJ Config file (2nd param) instead of running a pipeline      ##
##                                                                      ##
##########################################################################
. "${AWS_LIB}"

BLJ_JAR=${BLJ}/dist/BioLockJ.jar

# Display BioLockJ release version
display_version() {
	[ -f "${BLJ}/.version" ] && cat "${BLJ}/.version" && return
	echo "Missing ${BLJ}/.version"
}

# Show the help menu
display_help() {
    echo "BioLockJ $(display_version) - UNCC Fodor Lab July 2018" 
    echo 'Most args can be passed using 1st letter only (with or without hyphens)'
    echo '    Run new pipeline:        config   <file_path>'
    echo '    Restart pipeline:        restart  <dir_path>'
    echo '    Encrypt password:        pass     <password>'
    echo '    Show help menu:          help'
    echo '    Show version:            version'
    echo '    Run on AWS:              aws'
    echo '    Run in Docker:           docker'
    echo '    Run Docker GUI:          gui'
    echo '    Mount Docker BLJ         blj'
    echo '    Mount Docker BLJ_SUP     blj_sup'
}

# Convert input parameters to array of flag args and "name=value" arg pairs
# Params $@ passed in from main script input parameters at runtime
get_params() {
	args=("$@") && i=0 && name='' && out='' && numArgs=${#args[*]} 
    for arg in ${args[@]}; do
    	arg=$(echo $arg | sed 's/^\(-\)*//')
    	$(containsElement $arg docker blj blj_sup gui aws) && out="${out} ${arg}" && continue
		[ ${#name} -eq 0 ] && name="${arg}" && continue
		out="${out} ${name}=${arg}" && name=''
    done
	[ "${out/'c='}" == "${out}" ] && [ "${out/'r='}" == "${out}" ] && [ ${#name} -gt 0 ] && out="${out} c=${name}"
    echo "${out}" | xargs
}

# Run main script algorithm
# Param 1 - Array of biolockj script args
main() {
	arg1="${1//-}"
	if [ $# -eq 1 ] && [ "${arg1:0:1}" == "v" ]; then
		display_version
	elif [ $# -eq 1 ] && [ "${arg1:0:1}" == "h" ]; then 
		display_help
	else
		printf "Execute CMD  --------->  biolockj $(echo ${@}) \n"
		run_biolockj $(get_params $@)
	fi
}

# Run biolockj by locally, on AWS, or in Docker mode based on script args
# Params - Array of processed script args
run_biolockj() {
	config=$(named_arg $@ c)
	restart=$(named_arg $@ r)
	! $(containsElement gui $@) && [ ${#config} -eq 0 ] && [ ${#restart} -eq 0 ] && 
		exit_script "Error [ biolockj ]: Either -config or -restart arg is required!"
	if $(containsElement gui $@) && $(containsElement aws $@); then
		run_aws_gui
	elif (containsElement aws $@); then
		[ ${#restart} -eq 0 ] && [ ${#config} -eq 0 ] && exit_script "Error [ biolockj ]: AWS pipelines require config file path arg!"
		run_aws "${config}"
	elif $(containsElement gui $@) || $(containsElement docker $@); then
		dockblj $@
	else # direct local pipeline
		start_pipeline "$(verify_args $@)"
	fi
}

# Start local pipeline by calling java to run the BioLockJ.jar on the given Config file
# Params - Array of processed script args
start_pipeline() {
	i=0 && initDir="$(most_recent_pipeline)" && pipeDir="${initDir}" && initJava=$(ps | grep -c java) 
	numJava=${initJava} && echo -e "Starting BioLockJ:  \"nohup java -jar ${BLJ_JAR} -b ${BLJ_PROJ} -u ${HOME} $@ >/dev/null 2>&1 &\""
	nohup java -jar "${BLJ_JAR}" -b "${BLJ_PROJ}" -u "${HOME}" $@ >/dev/null 2>&1 &
	[ $? != 0 ] && ${BLJ}/script/biolockj -h && exit_script "Error [ biolockj ]:  Unable to run ${BLJ_JAR}"
	printf "Initializing BioLockJ."
	while [ $i -lt 15 ] && [ "${initDir}" == "${pipeDir}" ] && [ ${initJava} -eq ${numJava} ]; do
		sleep 3 && i=$((i+1)) && printf "." && pipeDir="$(most_recent_pipeline)" && numJava=$(ps | grep -c java)
	done
	sleep 1 && echo "." && pipeDir="$(most_recent_pipeline)"
	if [ ${#restart} -gt 0 ] && [ ${numJava} -gt ${initJava} ]; then 
		echo "Restarting pipeline:  ${pipeDir}"
	elif [ ${#restart} -eq 0 ] && [ "${initDir}" != "${pipeDir}" ] || [ ${numJava} -gt ${initJava} ]; then 
		echo "Starting pipeline:  ${pipeDir}"
	elif [ ${#restart} -eq 0 ] && ! $(containsElement gui $@); then
		echo "Pipeline may have failed to launch - check $BLJ_PROJ for new pipeline"
	fi
	echo "blj_go       -> Move to pipeline output directory"
	echo "blj_log      -> Tail pipeline log (accepts tail runtime parameters)"
	echo "blj_summary  -> View module execution summary"
}

# Throw error if params are invalid
# Params - Array of processed script args
verify_args() {
	newPass=$(named_arg $@ p)
	[ ${#newPass} -gt 0 ] && args="${@/p=$newPass}"
	args="${@//=/ }"
	[ ${#newPass} -gt 0 ] && args="${args} -p ${newPass}"
	! $(in_docker_env) && [ ${#config} -gt 0 ] && [ ! -f "${config}" ] &&
		${BLJ}/script/biolockj -h && exit_script "Error [ biolockj ]:  \"${config}\" not found on filesystem"
	! $(in_docker_env) && [ ${#restart} -gt 0 ] && [ ! -d "${restart}" ] &&
		${BLJ}/script/biolockj -h && exit_script "Error [ biolockj ]:  \"${restart}\" not found on filesystem"
	[ ! -d "${BLJ_PROJ}" ] && exit_script "Error [ biolockj ]: Required env variable BLJ_PROJ undefined: \"${BLJ_PROJ}\""
	[ ! -f "${BLJ_JAR}" ] && exit_script "Error [ biolockj ]: BioLockJ Jar file \"${BLJ_JAR}\" not found"
	echo "${args}"
}

main $@

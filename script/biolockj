#!/bin/bash
##########################################################################
##                                                                      ##
##  Script requires valid BioLockJ Config file passed as a parameter.   ##
##  Script requires valid BioLockJ pipeline root directory: $BLJ_PROJ.  ##
##                                                                      ##
##  Pass optional param "-r" as 1st param to restart failed pipeline    ##
##                                                                      ##
##  Pass admin email password as 1st param to encode and store in the   ##
##  BioLockJ Config file (2nd param) instead of running a pipeline      ##
##                                                                      ##
##########################################################################
. $BLJ/script/blj_functions
. $BLJ/script/aws_functions

config=
runAws=
bljJar=$BLJ/dist/BioLockJ.jar

# Convert input parameters to array with values "name=value"
get_params() {
	args=("$@")
	numArgs=${#@}
	i=0
	myConfig=
	name=
    for arg in ${args[@]}; do  
    		[ $((i%2)) -eq 0 ] && name=${arg}
    		if [ $((i%2)) -eq 1 ]; then
    			[ "$name" == "-c" ] || [ "$name" == "-config" ] && myConfig=${arg}
    			echo "$name=${arg}"
    			name=""
		fi  
    		i=$(expr $i + 1)
    done
    [ ${#name} -gt 0 ] && [ ${#myConfig} -eq 0 ] && echo "-c=$name"
}

if [ $# -eq 0 ]; then
	$BLJ/script/biolockj -h
	exit_script "Error [ biolockj ]: Missing required parameters"
fi

inArray=$(get_params $@)

runAws=$(named_arg $inArray -a)
[ ${#runAws} -eq 0 ] && runAws=$(named_arg $inArray --aws)

config=$(named_arg $inArray -c)
[ ${#config} -eq 0 ] && config=$(named_arg $inArray --config)

restart=$(named_arg $inArray -r)
[ ${#restart} -eq 0 ] && restart=$(named_arg $inArray --restart)

newPass=$(named_arg $inArray -p)
[ ${#newPass} -eq 0 ] && newPass=$(named_arg $inArray --password)

[ $# -eq 1 ] && [ ${#config} -eq 0 ] && config=$1

[ ! -f "$config" ] && $BLJ/script/biolockj -h && exit_script "Error [ biolockj ]:  $config is not a valid file\n"

[ ${#runAws} -gt 0 ] && run_aws $config
if [ $? -eq 0 ]; then
	exit_script "Successfully launched AWS Pipeline"
else
	exit_script "Error [ biolockj ]: Unable to launch AWS Pipeline" 1
fi

[ ! -d "$BLJ_PROJ" ] && exit_script "Error [ biolockj ]: Required env variable BLJ_PROJ undefined"
[ ! -f "$bljJar" ] && exit_script "Error [ biolockj ]: $bljJar not found"

if [ $# -eq 1 ] && [ "$1" == "-h" ] || [ "$1" == "--help" ]; then   
    echo "BioLockJ $(get_version) - UNCC Fodor Lab July 2018"
    echo "Run new pipeline:   biolockj               <config_file>"
    echo "Run AWS pipeline:             -a/--aws     <config_file>"
    echo "Run new pipeline:             -c/--config  <config_file>"
    echo "Show help menu:               -h/--help"
    echo "Encrypt password:             -p/--pass     <new_passw>"
    echo "Restart pipeline:             -r/--restart  <directory>"
    exit 0
fi

if [ ${#newPass} -gt 0 ] && [ ${#config} -eq 0 ]; then
	$BLJ/script/biolockj -h && exit_script "Error [ biolockj ]: Invalid parameters: $@"
fi

if [ ${#restart} -eq 0 ] && [ ${#config} -eq 0 ]; then
	$BLJ/script/biolockj -h && exit_script "Error [ biolockj ]: Invalid parameters: $@"
fi

if [ ${#restart} -gt 0 ] && [ ! -d "$restart" ]; then
	$BLJ/script/biolockj -h && exit_script "Error [ biolockj ]: $restart is not a valid directory\n"
fi 

if [ ${#newPass} -gt 0 ] && [ ${#config} -gt 0 ]; then
	echo "Encrypt & save email password to Config property mail.encryptedPassword in $config\n"
fi

i=0
initPipeline=$(most_recent_pipeline)
pipelineDir=$(most_recent_pipeline)
initJava=$(ps | grep -c java)
numJava=$(ps | grep -c java)

echo -e "Run Java Application with Command:  \"nohup java -jar $bljJar -b $BLJ_PROJ $@ >/dev/null 2>&1 &\""
nohup java -jar $bljJar -b $BLJ_PROJ $@ >/dev/null 2>&1 &
[ $? != 0 ] && $BLJ/script/biolockj -h && exit_script "Error [ biolockj ]:  Unable to run $bljJar"
echo "Initializing BioLockJ"

while [ $i -lt 10 ] && [ "$initPipeline" == "$pipelineDir" ] && [ $initJava -eq $numJava ]; do
	sleep 1
	((i++))
	pipelineDir="$(most_recent_pipeline)"
	numJava=$(ps | grep -c java)
done

if [ ${#restart} -gt 0 ] && [ $numJava -gt $initJava ] && [ "$initPipeline" == "$pipelineDir" ]; then
	echo "Restarted pipeline:  $pipelineDir"
elif [ ${#restart} -eq 0 ] && [ "$initPipeline" != "$pipelineDir" ]; then
	echo "Started new pipeline:  $pipelineDir"
elif [ ${#restart} -eq 0 ]; then
	echo "BioLockJ may have failed on: exec( \"nohup java -jar $bljJar -b $BLJ_PROJ $@ >/dev/null 2>&1 &\" )"
	echo "Check $BLJ_PROJ for new pipeline directory" && return
fi

echo "blj_go       -> Move to pipeline output directory"
echo "blj_log      -> Tail pipeline log (accepts tail runtime parameters)"
echo "blj_summary  -> View module execution summary"

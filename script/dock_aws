#!/bin/bash
##############################################################################
##                                                                          ##
##  Script launches BioLockJ in a Docker container                          ##
##                                                                          ##
##  Bash env must include pipeline base directory: $BLJ_PROJ                ##
##                                                                          ##
##  Required Parameters                                                     ##
##  Config file path:       config                                          ##
##  Input directories:      inputDirPaths (commma separated, no spaces)     ##
##                                                                          ##
##  Optional parameters:                                                    ##
##                                                                          ##
##  Admin email password    changePassword                                  ##
##  Metadata directory:     metadataFilePath                                ##
##  Primer directory:       trimPrimersFilePath                             ##
##  Restart flag:           -r <directory>                                  ##
##  Docker flag:            -docker                                         ##
##                                                                          ##
##############################################################################
. $BLJ/script/blj_functions

[ ! -d "$BLJ_PROJ" ] && echo "Exit program - Required bash variable BLJ_PROJ undefined" && exit 1

# Pass script input parameters + the argument value
# Return value if found in input parameters
arg_exists() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args;
	do
		[ "$arg" == "$target" ] && echo "$target" && return
	done
}

# Populates the docker run BLJ_OPTIONS parameter
# Include -docker to run BioLockJ in a Docker container
# Include Docker container path to required Config file
# Include all directory paths the blj_manager may need to map volumes in spawned Docker compute node instances
blj_options() {
	options="-docker -b $(blj_proj) -C $(dirname $config) -c /config/$(basename $config)" 
	$(has_param $runAws) && options="$options $runAws"
	$(has_param $doRestart) && options="$options -r $(restart_dir)"
	$(has_param $newPass) && options="$options -p $newPass"
	$(has_param $inputDirs) && options="$options -i $inputDirs"
	$(has_param $metaPath) && options="$options -m $metaPath"
	$(has_param $primerPath) && options="$options -t $primerPath"
	echo $options
}

# Return $HOST_BLJ_PROJ if called from within a docker container (like webapp), otherwise return $BLJ_PROJ
blj_proj() {
	
	bljProj=$BLJ_PROJ
	if $(has_param $inDocker); then
		bljProj=$HOST_BLJ_PROJ
		if $(has_param $bljProj); then
			bljProj=$HOST_BLJ_PROJ
		else
			echo "Exit program - Required env variable HOST_BLJ_PROJ undefined" && exit 1
		fi
	fi
	
	if [ "${bljProj: -1}" == "/" ]; then
		len=$((${#bljProj}-1))
		bljProj="${bljProj:0:len}"
	fi
	
	$(has_param $bljProj) && echo $bljProj && return
	echo "Exit program - Required env variable BLJ_PROJ undefined" && exit 1
}

# Return boolean evaluation if single argument passed exists with a non-zero size
has_param() {
	[ ${#1} -gt 0 ]
}

# Get the Docker manager module (aws_manager or blj_manager) with $DOCKER_HUB_USER user prefix
manager_type() {
	if $(has_param $runAws); then
		echo $DOCKER_HUB_USER/aws_manager
	else
		echo $DOCKER_HUB_USER/blj_manager
	fi
}

# Pass script input parameters + the argument name
# Named arguments must be formated: "argName=argValue"
named_arg() {
	args=("$@")
	numArgs=${#@}
	target=${args[$((numArgs-1))]}
	args=${args[@]:0:$((numArgs-1))}
	for arg in $args; 
	do
		IFS="="
		tokens=( $arg )
		[ ${#tokens[*]} -eq 2 ] && [ ${tokens[0]} == $target ] && echo ${tokens[1]} && return
	done
}

# Get the internal Docker restart directory
restart_dir() {
	echo "/pipelines/${doRestart#$(blj_proj)/}"
}

# Print status message with GUI context and BLJ_OPTIONS
status_msg() {
	msg=""
	if $(has_param $inDocker); then
		msg="Docker $DOCKER_HUB_USER/webapp GUI"
	else
		msg="Host machine $BLJ/web_app GUI" 
	fi
	
	if $(has_param $doRestart); then
		msg+=" restarting $(restart_dir) in $DOCKER_HUB_USER/blj_manager Docker container"
	else
		msg+=" starting $DOCKER_HUB_USER/blj_manager Docker container"
	fi
	
	echo "$msg with BLJ_OPTIONS=$(blj_options)"
}

# Verify host directory exists, if dockblj is not deployed inside a Docker container
verify_host_dir() {
	#echo "validate Host Dir: $# + $1"
 	[ $# -eq 2 ] && [ ! -d "$1" ] && echo "Exit script - $2 directory not found: $1" && exit 1
}

# Verify host file exists, if dockblj is not deployed inside a Docker container
verify_host_file() {
	#echo "validate Host Dir: $# + $1"
	[ $# -eq 2 ] && [ ! -f "$1" ] && echo "Exit script - $2 file not found: $1" && exit 1
}

# Verify paths are valid, if dockblj is not deployed inside a Docker container
verify_input_params() {
	$(has_param $doRestart) && verify_host_dir $doRestart Restart
	$(has_param $config) && verify_host_file $config Config
	$(has_param $metaPath) && verify_host_dir $metaPath Metadata
	$(has_param $primerPath) && verify_host_dir $primerPath Primer
	if $(has_param $inputDirs); then
		IFS=","
		dirPaths=( $inputDirs )
		for dir in "$dirPaths"; do
			verify_host_dir $dir Input
		done
	else
		echo "Exit script - Input directory is required" && exit 1
	fi 
}

config=$(named_arg "$@" "config")
inputDirs=$(named_arg "$@" "inputDirPaths")
metaPath=$(named_arg "$@" "metadataFilePath")
primerPath=$(named_arg "$@" "trimPrimersFilePath")
newPass=$(named_arg "$@" "-p")
doRestart=$(named_arg "$@" "-r")
inDocker=$(arg_exists "$@" "-docker")
runAws=$(arg_exists "$@" "-aws")

# Call function to verify input parameters are valid unless running in Docker container
! $(has_param $inDocker) && verify_input_params

# Call function to print status message
echo $(status_msg)

#echo "config: $(dirname $config)"
#echo "inputDir: $inputDirs"
#echo "metaPath: $metaPath"
#echo "BLJ_PROJ: $(blj_proj)"
#echo "BLJ_OPTIONS: $(blj_options)"


D_SOCK="/var/run/docker.sock"

if $(has_param $metaPath) && $(has_param $primerPath); then
	docker run -e "BLJ_OPTIONS=$(blj_options)" -v $D_SOCK:$D_SOCK -v $metaPath:/meta -v $primerPath:/primer \
		-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $inputDirs:/input --rm $(manager_type)
elif $(has_param $metaPath); then	
	docker run -e "BLJ_OPTIONS=$(blj_options)" -v $D_SOCK:$D_SOCK -v $metaPath:/meta \
		-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $inputDirs:/input --rm $(manager_type)
elif $(has_param $primerPath); then	
	docker run -e "BLJ_OPTIONS=$(blj_options)" -v $D_SOCK:$D_SOCK -v $primerPath:/primer
		-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $inputDirs:/input --rm $(manager_type)
else
	docker run -e "BLJ_OPTIONS=$(blj_options)" -v $D_SOCK:$D_SOCK \
		-v $(blj_proj):/pipelines:delegated -v $(dirname $config):/config -v $inputDirs:/input --rm $(manager_type)
fi

[ $? -ne 0 ] && echo "Exit script - docker run command failed"  

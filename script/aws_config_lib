#!/bin/bash
##############################################################
##  This script contains functions to work with AWS Config  ##
##############################################################
. "${DOCKER_LIB}"

AWS_CONF=~/.aws/aws_config
STANDARD_CONFIG="${BLJ}/resources/config/default/standard.properties"
DOCKER_CONFIG="${BLJ}/resources/config/default/docker.properties"
alias awsr="aws_report_config"

# Archive previous AWS Config properties file
# Param 1 - Pipeline Config file-path
aws_archive() {
	aws_log "Archive AWS properties, key file, and start script to ~/.aws/history"
	[ ! -d ~/.aws/history ] && mkdir ~/.aws/history
	[ -f "${AWS_CONF}" ] && mv "${AWS_CONF}" ~/.aws/history/aws_config-$(date "+%Y-%m-%d.%H.%M.%S")
	echo "# AWS + Pipeline Config Cache to launch ${1}" > "${AWS_CONF}" && chmod 770 "${AWS_CONF}" 
}

# Get an AWS property ${1} from local AWS Config file ${2} under the aws.profile
# Param 1 - argName Parse filePath for a line that starts with argName
# Param 2 - filePath Target file
aws_local_prop() {
	[ ! -f "${2}" ] && aws_log "Error:  File not found: ${2}" && return
	foundProfile=0 && prop="${1} = "
	cat "${2}" | while read -r line; do
		[ $foundProfile -eq 1 ] && [ "${line:0:1}" == "[" ] && break
		[ $foundProfile -eq 1 ] && [ "${line:0:${#prop}}" == "${prop}" ] && echo "${line/$prop}" && return
		[ "$line" == "[$(aws_profile)]" ] && foundProfile=1
	done
}

# Log current time-stamp and print the line parameter
# Param 1 - Log statement  
aws_log() {
	echo "[ $(date "+%Y-%m-%d %H:%M:%S") ] ${1}"
}

# Return configured AWS Profile
aws_profile() {
	echo "$(get_blj_prop aws.profile default)"
}

# Return user AWS region
aws_region() {
	echo "$(get_blj_prop aws.region $(aws configure get region))"
}

# Print AWS Config report
aws_report_config() {
	[ ! -f "${AWS_CONF}" ] && aws_log "Cannot report cache --> ${AWS_CONF} not found" && return
	aws_log "---------------------------------------------------"
	aws_log "Report current AWS Config"
	aws_log "---------------------------------------------------"
	cat "${AWS_CONF}"
	aws_log "---------------------------------------------------"
}

# Lists stacks available on AWS. If status arg provided, only return stacks with the given status.
# Param 1 (optional) Stack status
aws_stacks() {
	if [ ${#1} -gt 0 ]; then
		awsStacks=$(aws cloudformation describe-stacks --query "Stacks[?StackStatus=='$1'].StackName")
	else
		awsStacks=$(aws cloudformation describe-stacks --query "Stacks[].StackName")
	fi
	[ ${#awsStacks} -gt 0 ] && [ "${awsStacks}" != "None" ] && echo "${awsStacks}" && return
}

# Get the s3 bucket names in the user region
aws_s3_buckets() {
	myBuckets=$(aws s3api list-buckets --region $(aws_region) --query "Buckets[].Name")
	[ ${#myBuckets} -eq 0 ] || [ "${myBuckets}" == "None" ] && return
	echo "${myBuckets}"
}

# Get AWS-Access-ID from local file sytem (requires user has logged on to client or file is staged to $HOME)
get_aws_access_key_id() {
	echo $(aws_local_prop aws_access_key_id ~/.aws/credentials)
}

# Get AWS-Access-KEY from local file sytem (requires user has logged on to client or file is staged to $HOME)
get_aws_secret_access_key() {
	echo $(aws_local_prop aws_secret_access_key ~/.aws/credentials)
}

# Get the current IAM user name
get_aws_user() {
	aws iam get-user --query User.UserName
}

# Get a prop stored in ${AWS_CONF}
# Param 1 - Prop name
# Param 2 - (Optional) Default value
get_blj_prop() {
	val="$(get_property ${AWS_CONF} $1)"
	[ ${#val} -eq 0 ] && [ ${#2} -gt 0 ] && val="${2}" && set_blj_prop "${1}" "${2}"
	echo "${val}"
}

# Get the Pipeline Config local file-path
# Param 1 - local or ec2
get_config() {
	[ "${1}" == "local" ] && echo "$(get_blj_prop internal.config)"
	[ "${1}" == "ec2" ] && echo "${BLJ_CONFIG}/$(basename $(get_blj_prop internal.config))"
}

# Get the Config name - used to label pipeline dirs
get_config_name() {
	echo $(echo $(basename $(get_config local)) | cut -f1 -d".")
}

# Init AWS Config properties file ${AWS_CONF} with pipeline Config, AWS config, and standard defaults
# Check BLJ pipeline Config files + all nested default Config files
# Add docker.properties if not already in list of nested Config files
# Param 1 - Pipeline Config file path
init_aws_config() {
	[ ! -f "${HOME}/.aws/config" ] && exit_script "Error [ aws_config_lib.init_aws_config() ]: Required file not found: ${HOME}/.aws/config"
	[ ! -f "${HOME}/.aws/credentials" ] && exit_script "Error [ aws_config_lib.init_aws_config() ]: Required file not found: ${HOME}/.aws/credentials"
	aws_archive "${1}"
	[ "${1}" == "gui" ] && return
	set_pipeline_conig_props "${STANDARD_CONFIG}" && set_pipeline_conig_props "${DOCKER_CONFIG}"
	defConfig='' && propFile="$(get_property $1 pipeline.defaultProps)"
	while [ -f "${propFile}" ] && [ "${propFile}" != "${STANDARD_CONFIG}" ] && [ "${propFile}" != "${DOCKER_CONFIG}" ] && [ "${defConfig}" == "${defConfig/$propFile}" ]; do
		aws_log "Load default Config file: $propFile"
		[ ${#defConfig} -gt 0 ] && defConfig=", ${defConfig}"
		defConfig="${propFile}${defConfig}" && set_pipeline_conig_props "${propFile}" && propFile="$(get_property $propFile pipeline.defaultProps)"
	done

	set_pipeline_conig_props "${1}"
	[ $# -eq 2 ] && set_blj_prop "aws.profile" "${2}"
 	export AWS_DEFAULT_PROFILE="$(aws_profile)"
	verify_config
	aws_log "Using AWS profile: $(aws_profile)"
	set_blj_prop "internal.config" "${1}"
	aws_log "MASTER AWS Config properties saved to --> ${AWS_CONF}" && sort -d "${AWS_CONF}" > "${TMP}" && mv "${TMP}" "${AWS_CONF}"
}

# Get the ec2 key file for the ec2 head node
key_file() {
	[ "$(get_blj_prop aws.stack)" == "" ] && exit_script "Error [ aws_config_lib.key_file() ]: Required AWS Config \"aws.stack\" is undefined!"
	echo "${HOME}/.aws/$(get_blj_prop aws.stack).pem"
}

# Get local Nextflow <base> config file
local_nf_conf() {
	[ ! -d ~/.aws/nextflow/$(get_blj_prop aws.stack) ] && mkdir -p ~/.aws/nextflow/$(get_blj_prop aws.stack)
	echo ~/.aws/nextflow/$(get_blj_prop aws.stack)/config
}

# Remove AWS property from ${AWS_CONF}
# Param 1 - prop name 
rm_blj_prop() {
	rm_property "${AWS_CONF}" "${1}"
}

# Call set_property on Config file ${AWS_CONF}
# Param 1 - Prop name
# Param 2 - Prop value
set_blj_prop() {
	set_property "${AWS_CONF}" "${1}" "${2}"
}

# Save AWS Config properties in pipeline Config file to AWS Config file: ${AWS_CONF}
# Param 1 - Pipeline Config file path
set_pipeline_conig_props() {
	aws_log "Update ${AWS_CONF} with AWS properties found in Pipeline Config ${1}"
	while read line; do
		line="$(echo ${line} | xargs)" && [ ${#line} -eq 0 ] || [ "${line:0:1}" == "#" ] && continue
		IFS=$'=' && tokens=( ${line} ) && reset_IFS && set_blj_prop "${tokens[0]}" "$(eval echo ${tokens[1]})"
	done < "${1}"
	sort -d "${AWS_CONF}" > "${TMP}" && mv "${TMP}" "${AWS_CONF}"
}

# Set basic defaults if undefined & throw error if user did not login to aws client or is missing required properties
verify_config() {
	err="Error [ aws_config_lib.verify_config() ]: Unable to find required AWS Config: ${AWS_CONF}"
	err2="Please verify AWS client configuration details from command line and try again."
	aws_log "Verfiying rquired AWS Config configuration..."  
	quiet=$(aws_region)
	quiet=$(get_blj_prop aws.ec2InstanceType t2.micro)
	quiet=$(get_blj_prop docker.imgVersion latest)
	quiet=$(get_blj_prop docker.user biolockj)
	[ "$(get_aws_access_key_id)" == "" ] && exit_script "${err} \"aws_access_key_id\" in ~/.aws/credentials.  ${err2}"
	[ "$(get_aws_secret_access_key)" == "" ]  && exit_script "${err} \"aws_secret_access_key\" in ~/.aws/credentials.  ${err2}"
	[ "$(get_blj_prop aws.ram)" == "" ] && exit_script "${err} \"aws.ram\" in ${AWS_CONF}"
	verify_ec2_props
}

# Verify the Pipeline Config property aws.ec2AcquisitionStrategy
verify_ec2_props() {
	aws_log "Verify required BLJ pipeline properties..." && ec2SpotPer=$(get_blj_prop aws.ec2SpotPer)
	ec2strategy=$(echo $(get_blj_prop aws.ec2AcquisitionStrategy) | awk '{print toupper($0)}')
	[ ${#ec2strategy} -eq 0 ] && 
		exit_script "Error [ aws_config_lib.verify_ec2_props() ]: Required property \"aws.ec2AcquisitionStrategy\" is undefined!"
	[ "${ec2strategy}" != "SPOT" ] && [ "${ec2strategy}" != "DEMAND" ] && 
		exit_script "Error [ aws_config_lib.verify_ec2_props() ]: Required property \"aws.ec2AcquisitionStrategy\" is invalid \"${ec2strategy}\".  Update to \"spot\" or \"demand\"!"
	[ "${ec2strategy}" == "SPOT" ] && [ ${#ec2SpotPer} -lt 1 ] || [ ${ec2SpotPer} -gt 100 ] && \
		exit_script "Error [ aws_config_lib.verify_ec2_props() ]: Dependent property \"aws.ec2SpotPer=${ec2SpotPer}\" is required for \"aws.ec2AcquisitionStrategy=SPOT\".  Update to integer value in the range {0-100}"
}

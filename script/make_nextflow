#!/bin/bash
################################################################################
##                                                                            ##
##  Build Nexflow main.nf template                                            ##
##  Query for SEARCH_KEY in all java files under $BLJ/src/biolockj/module     ##
##  For each valid file, trim the file path & file extension                  ##
##  Remaining value = Java class name module.getClass().getName() after       ##
##                    substituting "_" for all "." characters                 ##
##                                                                            ##
################################################################################
. /app/biolockj/script/blj_config
. "${AWS_LIB}"

bljVer="$(biolockj -v)"
[${#bljVer} -eq 0] && bljVer="$($BLJ_SCRIPT/biolockj -v)"

# Build the template
# Param 1 - template file path (output of function)
# Param 2 - List of modules (using special delimiters)
buildNexflowTemplate() {
	echo "Building Nextflow Template...${1}"
	modules="${2}"
	numModules=$(echo $modules | wc -w | xargs)
	summaryMsg="BioLockJ ${bljVer} generated Nextflow Config with $numModules BioModule process definitions"
	echo "// $summaryMsg" > "${1}"
	echo "" >> "${1}"
	for module in ${modules[@]}; do
		echo "process ${module} {" >> "${1}"
		echo '    echo true' >> "${1}"
		echo '    cpus $script.numThreads' >> "${1}"
		echo '    memory $aws.ram' >> "${1}"
		echo '    label $nextflow.dockerImage' >> "${1}"
		echo '    input:' >> "${1}"
		echo '    val worker from Channel.watchPath( "BLJ_MODULE_SUB_DIR/*.sh" )' >> "${1}"
		echo '    """' >> "${1}"
		echo '    #!/bin/bash' >> "${1}"
		echo '    bash ${worker}' >> "${1}"
		echo '    """' >> "${1}"
		echo '}' >> "${1}"
	done
	addEndPipelineProcess "${1}" "${2}"
	echo "-----------------------------------------------------------------------------------------"
	[ -f "${1}" ] && echo "Success! -->  $summaryMsg" && echo "Deployed: ${1}" && cat "${1}" && \
		echo "-----------------------------------------------------------------------------------------"	
}

# Add end pipeline process to the end of the template
# Param 1 - template file path (output of function)
addEndPipelineProcess() {
	echo "addEndPipelineProcess()..."
	echo "" >> "${1}"
	echo "process end_biolockj_pipeline {" >> "${1}"
	echo '    echo true' >> "${1}"
	echo '    input:' >> "${1}"
	echo '    val statusFile from Channel.watchPath( "BLJ_PIPELINE_DIR/biolockj*" )' >> "${1}"
	echo '    """' >> "${1}"
	echo '    #!/bin/bash' >> "${1}"
	echo "    if [ $(basename $statusFile) == biolockjComplete ]; then" >> "${1}" 
	echo "        echo 'EXIT NEXTFLOW - Pipeline Success'" >> "${1}"
	echo "        exit 0" >> "${1}"
	echo "    elif [ $(basename $statusFile) == biolockjFailed ]; then" >> "${1}"
	echo "        clear_jobs" >> "${1}"
	echo "        echo 'EXIT NEXTFLOW - Pipeline Failed'" >> "${1}"
	echo "        exit 1" >> "${1}"
	echo "    fi" >> "${1}"
	echo '    """' >> "${1}"
	echo '}' >> "${1}"

	echo "-----------------------------------------------------------------------------------------"
	[ -f "${1}" ] && echo "Success! -->  $summaryMsg" && echo "Deployed: ${1}" && cat "${1}" && \
		echo "-----------------------------------------------------------------------------------------"	
}

# Get the module list 
get_modules() {
	modules=${1//./ }
	modules=( $modules )
	echo ${modules[*]}
}

# Copy EC2 User root config into container /root directory:
# /user/ec2-user/.aws --> /root/.aws
# /user/ec2-user/.nextflow/config --> /root/.nextflow/config
stage_root_config() {
	[ ! -f "${EC2_HOME}/.aws/credentials" ] && exit_script "Missing EC2-AWS config: ${EC2_HOME}/.aws/credentials"
	[ ! -f "${EC2_HOME}/.nextflow/config" ] && exit_script "Missing EC2-Nextflow config: ${EC2_HOME}/.nextflow/config"
	echo "Copy ${EC2_HOME}/.aws into ~"
	cp -vr "${EC2_HOME}/.aws" ~ 
	echo "Copy ${EC2_HOME}/.nextflow/config into ~/.nextflow"
	cp -v "${EC2_HOME}/.nextflow/config" ~/.nextflow
	#echo "Copy $(get_ec2_nextflow_dir)/config into ~/.nextflow"
	#cp -v "$(get_ec2_nextflow_dir)/config" ~/.nextflow
}

if [ $# -lt 2 ]; then
	echo "Missing [ make_nextflow ] args - 2 params required to build main.nf --->"
	echo "  1) main.nf file-path"
	echo "  2) List of modules formatted with specific delimiters"
	sleep 15 && exit 1
else
	stage_root_config
	echo "Next - build template"
	buildNexflowTemplate "${1}" "$(get_modules ${2})"
fi

#!/bin/bash
##########################################################################
##                                                                       ##
##  This script calls biolockj on all property files in given directory  ##
##                                                                       ##
##  Script requires valid BioLockJ Config file passed as a parameter.    ##
##                                                                       ##
##  Pass optional param "-x" as 1st param to continue after any failure. ##
##  Otherwise exit script if any pipeline fails.                         ##
##                                                                       ##
###########################################################################
. "${BLJ_LIB}"


# Get pipeline status
pipeStatus() {
	if [ -f "${1}/biolockjComplete" ]; then echo "PASS"
  	elif [ -f "${1}/biolockjFailed" ]; then echo "FAIL"; else echo "Working"; fi
}

# requires 1 parameter --> path to pipeline directory
exit_program() {
  echo "${SPACER}" && echo "$1/$2 pipelines completed successfully - $(date)" && echo "${SPACER}" && exit 1
}

 # script times out after 5 hours
run_tests() {
	startCount=0 && passCount=0 && exitOnFailure="exit" && [ "${2}" == "-x" ] && exitOnFailure="continue"
	[ "${BLJ_PROJ}" == "${PWD}" ] && echo "Cannot execute blj_test from ${BLJ_PROJ}" && exit 1
	echo "Run all pipelines under ${1} --> if errors occur: ${exitOnFailure}" && prevDir=$(most_recent_pipeline)
	echo "${SPACER}" && echo "Initial Pipeline = ${prevDir} - $(date)"
	for f in ${1}/*; do
	  i=0 && j=0 && startCount=$((startCount+1)) && pipeDir="$(most_recent_pipeline)" && biolockj "${f}"
	  while [ ${i} -lt 12 ] && [ "${pipeDir}" == "${prevDir}" ]; do
	    sleep 15 && i=$((i+1)) && pipeDir="$(most_recent_pipeline)"
	  done
	  [ "${pipeDir}" == "${prevDir}" ] && echo "Most recent pipeline is still ${prevDir} --> EXIT SCRIPT!" && exit_program ${passCount} ${startCount}
	  prevDir="${pipeDir}" && echo "New Pipeline started:  ${prevDir} - $(date)" && status="$(pipeStatus $prevDir)" && printf "${status}"
	  while [ ${j} -lt 100 ] && [ "${status}" == "Working" ]; do
	    printf "." && sleep 180 && j=$((j+1)) && status="$(pipeStatus $prevDir)"
	  done
	  echo "" && [ "${status}" == "PASS" ] && passCount=$((passCount+1)) && echo "PIPELINE SUCCESS --> $f - $(date)" && continue
	  if [ "${status}" == "Working" ]; then echo "PIPELINE TIME-OUT --> $f - $(date)" else echo "PIPELINE FAILED --> $f - $(date)"; fi
	  [ "${exitOnFailure}" == "exit" ] && exit_program ${passCount} ${startCount}
	  echo "Continue to next project"
	done
	exit_program ${passCount} ${startCount}
}

verify_params() {
	[ $# -eq 0 ] && exit_script "Error [ blj_test ]: Missing required parameter - pipeline Config directory path"
	[ ! -d "${1}" ] && exit_script "Error [ blj_test ]: ${1} is not a valid directory"
	[ ! -d "$BLJ_PROJ" ] && exit_script "Error [ blj_test ]: Required env variable undefined --> \"BLJ_PROJ\""
}

verify_params $@
run_tests $@
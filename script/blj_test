#!/bin/bash
##########################################################################
##                                                                       ##
##  This script calls biolockj on all property files in given directory  ##
##                                                                       ##
##  Script requires valid BioLockJ Config file passed as a parameter.    ##
##                                                                       ##
##  Pass optional param "-c" as 1st param to continue after any failure. ##
##  Otherwise exit script if any pipeline fails.                         ##
##                                                                       ##
###########################################################################

# Returns Y or N to indicate if directory exists
function valid_dir {
	if [ ${#1} -gt 0 ] && [ -d "$1" ]; then  
		echo "Y" 
	else 
		echo "N"
	fi
}

# Returns Y or N to indicate if file exists
function valid_file {
	if [ ${#1} -gt 0 ] && [ -f "$1" ]; then  
		echo "Y" 
	else 
		echo "N"
	fi
}

SPACER="================================================================================"
# Requires 1 parameter --> path to pipeline root directory
function verifyAll(){
  if [ "$#" -eq 0 ]; then
    echo "Missing required parameter!  Must pass directory path.  Directory must contain 1+ BioLockJ Configuration files"
  elif [ "$(valid_dir $1)" == "N" ]; then
    echo "Input param [$1] is not a valid directory!"
  elif [ "$(valid_dir $BLJ_PROJ)" == "N" ]; then
    echo "Invalid BioLockJ pipeline root directory (global variable 'BLJ_PROJ'): $BLJ_PROJ"
  else
  	echo "Verified"
  fi
}

# No parameters, get the most recently updated subdirectory of $BLJ_PROJ
function getLatestProj(){
	cd $BLJ_PROJ
	latest_pipeline=$( \ls -t | head -1 )
	if [ ${#latest_pipeline} -gt 0 ] && [ -d $latest_pipeline ]; then
		cd $latest_pipeline
		echo "$( pwd )"
	else
		echo "No pipelines found in $BLJ_PROJ"
		exit 1
	fi
}

# requires 1 parameter --> path to pipeline directory
function pipeLineStatus(){
	if [ "$(valid_file $1/biolockjComplete)" == "Y" ]; then
    		echo "PASS"
  	elif [ "$(valid_file $1/biolockjFailed)" == "Y" ]; then
    		echo "FAIL"
  	else
    		echo "Working"
  	fi
}

# requires 1 parameter --> path to pipeline directory
function exitProgram(){
  echo "$SPACER"
  echo "$1/$2 pipelines completed successfully - $(/bin/date)"
  echo "$SPACER"
  exit 1
}

validParams="$(verifyAll $1)"
if [ "$validParams" == "Verified" ]; then
	echo "Script params verified!"
else
	echo "$validParams"
	echo "$SPACER"
	exit 1
fi

exitOnFailure="exit"
if [ "$#" == 2 ] && [ "$2" == "-x" ]; then
    exitOnFailure="continue"
fi

if [ "$BLJ_PROJ" == "$PWD" ]; then
    echo "Cannot execute blj_test from $BLJ_PROJ"
    exit 1
fi

numExecuted=0
numSuccess=0

echo "BLJ pipeline output directory: $BLJ_PROJ"
echo "Run test suite:  $1"
echo "If pipline failures occur: $exitOnFailure"
pipelineDir="$(getLatestProj)"
echo "$SPACER"
echo "Initial Pipeline = $pipelineDir - $(/bin/date)"
for f in $1/*; do
  biolockj $f
  count=0
  pipDir="$(getLatestProj)"
  while [ "${count}" -lt 12 -a "$pipDir" == "$pipelineDir" ]; do
    sleep 15
    let "count++"
    pipDir="$(getLatestProj)"
  done
  let "numExecuted++"

  if [ "$pipDir" == "$pipelineDir" ]; then
    echo "Pipeline directory still not created after 60 seconds! Latest is still $pipelineDir --> EXIT SCRIPT!"
    exitProgram $numSuccess $numExecuted
  else
  	pipelineDir="$pipDir"
	  echo "New Pipeline started:  $pipelineDir - $(/bin/date)"
  fi
 
  status="$(pipeLineStatus $pipelineDir)"
  count=0

  printf "$status"

  # script times out after 4.8 hours
  while [ "${count}" -lt 96 -a "$status" == "Working" ]; do
    printf "."
    sleep 180
    let "count++"
    status="$(pipeLineStatus $pipelineDir)"
  done
  echo ""
  if [ "$status" == "PASS" ]; then
    let "numSuccess++"
    echo "PIPELINE SUCCESS --> $f - $(/bin/date)"
  else
    if [ "$status" == "Working" ]; then
      echo "PIPELINE TIME-OUT --> $f - $(/bin/date)"
    else
      echo "PIPELINE FAILED --> $f - $(/bin/date)"
    fi
    if [ "$exitOnFailure" == "exit" ]; then
      exitProgram $numSuccess $numExecuted
    else
      echo "Continue to next project"
	  fi
  fi
done

exitProgram $numSuccess $numExecuted

#!/bin/bash
#######################################################
##                                                   ##
##  Script aws_select_functions is get AWS objects   ##
##  based on the user AWS profile.                   ##
##                                                   ##
#######################################################
. $BLJ/script/aws_config_functions

initialized=false
local_aws_dir=~/.aws
local_aws_config=$local_aws_dir/config

# Retrieve Linux AMI with name like amzn2-ami-ecs-hvm-2.0.20190301-x86_64-ebs AMI
aws_ami() {
	ami=$(aws ec2 describe-images --region $(aws_region) --owner amazon \
		--filter "Name=name,Values=amzn2-ami-ecs-hvm-*$(date +%Y)*x86_64-ebs" \
		--query "reverse(sort_by(Images, &CreationDate))[:1].ImageId" )
	[ ${#ami} -eq 0 ] && echo "Error:  Unable to obtain AWS AMI template from region $(aws_region)" && exit 1
	echo $ami
}

# Return profile name, if used to return props, props specific to this profile are returned
# Param 1 (optional) profile - name of existing profile, if null return [default] profile
aws_profile() {
	awsProfile=$(named_arg "$aws_args" awsProfile)
	[ ${#awsProfile} -gt 0 ] && echo $awsProfile && return
	[ $# -eq 0 ] && echo "[default]"
	[ $# -gt 0 ] && echo "[$1]"
}

# Get an AWS property $1 from a file $2 under the $(aws_profile) 
# Param 1 argName Parse filePath for a line that starts with argName
# Param 2 filePath Target file
aws_local_prop() {
	foundProfile=0
	prop="$1 = "
	awsProfile=$(named_arg "$aws_args" awsProfile)
	#echo "Search config=$2 for arg=$1 in profile= $(named_arg "$aws_args" awsProfile)"
	[ ! -f "$2" ] && echo "Error:  File not found: $2" && return
	cat $2 | while read -r line; do
		[ $foundProfile -eq 1 ] && [ "${line:0:1}" == "[" ] && break
		[ $foundProfile -eq 1 ] && [ "${line:0:${#prop}}" == "$prop" ] && echo "${line/$prop}" && return
		[ "$line" == "$awsProfile" ] && foundProfile=1
	done
}

# Get the region defined in the AWS config file
aws_region() {
	region=$(named_arg "$aws_args" region)
	[ ${#region} -eq 0 ] && region=$(aws_local_prop region $local_aws_config)
	[ ${#region} -eq 0 ] && echo "Error:  Region undefined in $local_aws_config" && exit 1
	echo $region
}

# Get a role get_role bljStack4 BatchServiceRoleArn 
# Param 1 Stack name
# Param 2 Role name
aws_role() {
	role=$(aws cloudformation describe-stacks --stack-name $1 --query "Stacks[*].Outputs[?OutputKey=='$2'].OutputValue")
	[ ${#role} -eq 0 ] && return
	echo $role
}

# Get the s3 bucket names in the user region
aws_s3_buckets() {
	myBuckets=$(aws s3api list-buckets --region $(aws_region) --query "Buckets[].Name")
	[ ${#myBuckets} -eq 0 ] || [ "$myBuckets" == "None" ] && return
	echo $myBuckets
}

# Lists stacks available on AWS. If status arg provided, only return stacks with the given status.
# Param 1 (optional) Stack status
aws_stacks() {
	awsStacks=
	if [ $# -eq 1 ]; then
		awsStacks=$(aws cloudformation describe-stacks --query "Stacks[?StackStatus=='$1'].StackName")
		[ ${#awsStacks} -eq 0 ] || [ "$awsStacks" == "None" ] && return
	else
		awsStacks=$(aws cloudformation describe-stacks --query "Stacks[].StackName")
		[ ${#awsStacks} -eq 0 ] || [ "$awsStacks" == "None" ] && return
	fi
	echo $awsStacks
}
